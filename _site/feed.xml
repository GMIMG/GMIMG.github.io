<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2019-09-02T18:56:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">GMIMG</title><subtitle>Mechagrammer</subtitle><author><name>Jimin Hwang</name></author><entry><title type="html">Project</title><link href="http://localhost:4000/posts/Project" rel="alternate" type="text/html" title="Project" /><published>2019-08-26T00:00:00+09:00</published><updated>2019-08-26T00:00:00+09:00</updated><id>http://localhost:4000/posts/Project</id><content type="html" xml:base="http://localhost:4000/posts/Project"></content><author><name>Gmimg</name></author><summary type="html"></summary></entry><entry><title type="html">Advanced C</title><link href="http://localhost:4000/posts/Advanced-C" rel="alternate" type="text/html" title="Advanced C" /><published>2019-08-18T00:00:00+09:00</published><updated>2019-08-18T00:00:00+09:00</updated><id>http://localhost:4000/posts/Advanced-C</id><content type="html" xml:base="http://localhost:4000/posts/Advanced-C">&lt;h1 id=&quot;advenced-c&quot;&gt;Advenced C&lt;/h1&gt;

&lt;h2 id=&quot;데이터타입과-형변환&quot;&gt;데이터타입과 형변환&lt;/h2&gt;

&lt;h3 id=&quot;데이터-타입&quot;&gt;데이터 타입&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;int 상수의 크기는 컴파일러 마다 다르다(CPU 의존적) -&amp;gt; 한번에 처리할 수 있는 단위&lt;/li&gt;
  &lt;li&gt;상수도 타입을 가지고 있음 -&amp;gt; 명확히하기위해 suffix 이용&lt;/li&gt;
  &lt;li&gt;little, big endian&lt;/li&gt;
  &lt;li&gt;구조체의 크기는 예측하지말고 sizeof사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
4
4
4
4
4
1
4
8
*/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//데이터 align 때문에 int와 char형 두개의 변수를 포함한 구조체의 크기가 8이다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;형변환&quot;&gt;형변환&lt;/h3&gt;

&lt;p&gt;C에서는 다음 4가지 경우에 형변환이 발생한다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;연산 : 큰 타입에 맞춰짐&lt;/li&gt;
  &lt;li&gt;대입 : 좌변의 타입으로 변경&lt;/li&gt;
  &lt;li&gt;호출 : argument가 parameter 타입으로 변경&lt;/li&gt;
  &lt;li&gt;Casting : ()안의 타입으로 변경&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;데이터 타입들의 대.소 판정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C에서 데이터 타입들의 크기를 판단하는 기준 : 더 큰수를 표현하는 타입의 크기가 더큼&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정수 승격 : int 보다 작은 정수타입은 무조건 signed int로 승격된다.&lt;/p&gt;

    &lt;p&gt;(signed, unsigned)char, short -&amp;gt; signed int로 변환 (단, int가 4B일 때만)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unsigned int 우선 : signed 와 unsigned int는 unsigned int를 크게본다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실수 우선 : 실수 타입이 정수 타입보다 크고 같은 타입끼리는 크기로 판단&lt;/p&gt;

    &lt;p&gt;int &amp;lt; long int &amp;lt; long long int &amp;lt; float &amp;lt; double &amp;lt; long double&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;큰타입이 작은 타입으로 변환될때 truncation이 발생함(경고 발생).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;signed 형의 음수 표현은 &lt;a href=&quot;https://ko.wikipedia.org/wiki/2%EC%9D%98_%EB%B3%B4%EC%88%98&quot;&gt;2의 보수&lt;/a&gt;를 이용함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(signed -&amp;gt; unsigned)형변환&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
	unsigned char c = 0xff;

	if(c == 0xff) // (signed int) 0x000000ff == (signed int) 0x000000ff
		printf(&quot;%x\n&quot;,c+1);
	else
		printf(&quot;%x\n&quot;,c-1);
		return 0;
}
// 100
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//(signed int) 0xffffffff != (signed int) 0x000000ff
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// fffffffe
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;//(signed int) 0xffffffff != (signed int) 0x000000ff 
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 컴파일러에 따라 char의 default값이 다름. VS : signed, RVDS : unsigned
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// fffffffe (VS에서 실행)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\Embedded\typecasting_extention.jpg&quot; alt=&quot;casting_extention&quot; /&gt;&lt;/p&gt;

&lt;p&gt;unsigned char, singed char가 더큰 타입의 signed int 와 비교하기위해 signed int 로 승격되는데 unsigned char는 나머지가 0으로 채워지는 반면, 같은 signed형인 signed char는 최상위 바이트로 채워진다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//상수는 signed int형 이므로 0xffffffff가 작은 데이터타입으로 
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//형변환 돼서 들어감 -&amp;gt; ss = 0xffff = -1, us = 0xffff = 65,535 
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UNSIGNED SHORT&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 조건문의 비교를 위해 다시 signed int로 형변환
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (singed int)0xffffffff &amp;lt; (signed int) 0x0000ffff
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// -1 &amp;lt; 65,535
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SIGNED SHORT&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SAME&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//UNSIGNED SHORT 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// (unsigned int) 0xffffffff &amp;lt; (unsigned int) 0x00000001
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sizeof 연산자 반환값 type은 size_t인데 unsigned int 과 같으므로 왼쪽항은 signed int에서 unsigned int 로 형변환 돼서 비교한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;실수형 상수&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;실수(float, double, long double)는 모두 signed 이다.&lt;/p&gt;

&lt;p&gt;long double 크기는 컴파일러 의존적이다.&lt;/p&gt;

&lt;p&gt;float는 부동소수점(float point)에서 파생됨.(고정 소수점은 메모리 비효율적)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;메모리 크기&lt;/th&gt;
      &lt;th&gt;유효자릿수&lt;/th&gt;
      &lt;th&gt;최소값&lt;/th&gt;
      &lt;th&gt;최대값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;4 Byte&lt;/td&gt;
      &lt;td&gt;6~7 자리(컴파일러 의존적)&lt;/td&gt;
      &lt;td&gt;1.175494351 e-38&lt;/td&gt;
      &lt;td&gt;3.402823 466 e+38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;8 Byte&lt;/td&gt;
      &lt;td&gt;15~16 자리(float의 약 2배)&lt;/td&gt;
      &lt;td&gt;2.250738 585072 014E -308&lt;/td&gt;
      &lt;td&gt;1.7976931348623158E + 308&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;참고 &lt;a href=&quot;/posts/embedded-c#C언어의-데이터-타입&quot;&gt;C언어의 데이터 타입&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;부호부 (sign bit)&lt;/th&gt;
      &lt;th&gt;지수부 (exponent bits)&lt;/th&gt;
      &lt;th&gt;가수부 (mantissa bits)&lt;/th&gt;
      &lt;th&gt;유효자릿수 (precision)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;float&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;23(부호포함 24)&lt;/td&gt;
      &lt;td&gt;6-7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;double&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;52(부호포함 53)&lt;/td&gt;
      &lt;td&gt;15-16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;예시) 3.5 를 이진수로 바꾸면 11.1(2) (소수점은 2로 계속 곱해서 정수부분을 취함, 0.625 =&amp;gt; 0.101(2))&lt;/p&gt;

&lt;p&gt;float 일때 유효숫자 1.11 * 2^(127+n)&lt;/p&gt;

&lt;p&gt;0 100/0000/0 110/0000/… == 0x4060/0000&lt;/p&gt;

&lt;h2 id=&quot;고급포인터&quot;&gt;고급포인터&lt;/h2&gt;

&lt;p&gt;피연산자 - 연산자 - statement - function - file - program&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Embedded" /><category term="C" /><category term="Embedded" /><summary type="html">Advenced C</summary></entry><entry><title type="html">Algorithm</title><link href="http://localhost:4000/posts/Algorithm" rel="alternate" type="text/html" title="Algorithm" /><published>2019-08-18T00:00:00+09:00</published><updated>2019-08-18T00:00:00+09:00</updated><id>http://localhost:4000/posts/Algorithm</id><content type="html" xml:base="http://localhost:4000/posts/Algorithm">&lt;p&gt;알고리즘 공부&lt;/p&gt;

&lt;p&gt;코딩을 하기전에 프로그램 설계를 완벽하게 하기.&lt;/p&gt;

&lt;p&gt;여러 알고리즘을 짜기보단 하나를 짜더라도 내가 짠 코드를 철저하게 분석한다.&lt;/p&gt;</content><author><name>Gmimg</name></author><summary type="html">알고리즘 공부</summary></entry><entry><title type="html">임베디드 개발자가 되려고 하는 이유</title><link href="http://localhost:4000/posts/Cause_Embedded" rel="alternate" type="text/html" title="임베디드 개발자가 되려고 하는 이유" /><published>2019-08-17T00:00:00+09:00</published><updated>2019-08-17T00:00:00+09:00</updated><id>http://localhost:4000/posts/Cause_Embedded</id><content type="html" xml:base="http://localhost:4000/posts/Cause_Embedded">&lt;p&gt;내 전공과의 연계성&lt;/p&gt;

&lt;p&gt;전문성에대한 매력&lt;/p&gt;

&lt;p&gt;연차가 쌓일수록 노하우&lt;/p&gt;

&lt;p&gt;주니어와의 차이&lt;/p&gt;

&lt;p&gt;소주가 아닌 위스키&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Embedded" /><summary type="html">내 전공과의 연계성</summary></entry><entry><title type="html">Job</title><link href="http://localhost:4000/posts/JOB" rel="alternate" type="text/html" title="Job" /><published>2019-08-17T00:00:00+09:00</published><updated>2019-08-17T00:00:00+09:00</updated><id>http://localhost:4000/posts/JOB</id><content type="html" xml:base="http://localhost:4000/posts/JOB">&lt;p&gt;먼저 기업의 채용공고를 보고 지원자격과 우대사항에대해 정리한다.&lt;/p&gt;</content><author><name>Gmimg</name></author><summary type="html">먼저 기업의 채용공고를 보고 지원자격과 우대사항에대해 정리한다.</summary></entry><entry><title type="html">Os</title><link href="http://localhost:4000/posts/OS" rel="alternate" type="text/html" title="Os" /><published>2019-08-02T00:00:00+09:00</published><updated>2019-08-02T00:00:00+09:00</updated><id>http://localhost:4000/posts/OS</id><content type="html" xml:base="http://localhost:4000/posts/OS">&lt;h1 id=&quot;rtos&quot;&gt;RTOS&lt;/h1&gt;

&lt;p&gt;펌웨어 기반의 MICOM은 Polling과 Interrupt기반으로 동작하여 기능별로 응답시간에 영향을 주고 우선순위가 없다.&lt;/p&gt;

&lt;p&gt;OS의 Kernel이 하는 일중 하나는 Task(Process)라는 일의 단위에 우선순위를 관리하고 스케쥴링하는 것 이다. (Kernel은 OS에서 하드웨어를 동작시키기위한 기본적인 서비스이다.) 즉, 작동이 복잡할수록 OS를 사용하는 것이 유리하다.&lt;/p&gt;

&lt;p&gt;OS는 범용으로 사용하는 GPOS(Heneral Purpose OS) 와, 임베디드 시스템에서 주로 사용하는 RTOS(Real-Time OS)로 나뉜다.&lt;/p&gt;

&lt;p&gt;여러 유/무료 RTOS가 있지만 간단하고 배우기 쉬운 micrium 사의 uC/OS-II에 대해서 배우고자한다.&lt;/p&gt;

&lt;p&gt;uC/OS-II&lt;/p&gt;

&lt;p&gt;RTOS는 다음과 같은 특성과 이슈가 있다.&lt;/p&gt;

&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;

&lt;h3 id=&quot;태스크-스택&quot;&gt;태스크 스택&lt;/h3&gt;

&lt;p&gt;태스크는 일의 단위이다. 태스크마다 독립된 스택영역을 가지며, 다른 태스크들은 이 영역을 액세스 할 수 없다.&lt;/p&gt;

&lt;p&gt;태스크가 잠시동안 저장공간을 사용할 경우 기본적으로 스택공간을 사용한다. 주로 함수 내에서 선언한 지역변수, 함수의 argument, 함수 수행 후 돌아갈 return 주소같은 태스크에서 사용하는 레지스터를 가지고 있다. 태스크가 실행되면서 함수를 호출하는 과정에서 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;태스크의-우선순위&quot;&gt;태스크의 우선순위&lt;/h3&gt;

&lt;p&gt;태스크들은 각자 우선순위(Priority)를 가지고있다.&lt;/p&gt;

&lt;h3 id=&quot;태스크-상태&quot;&gt;태스크 상태&lt;/h3&gt;

&lt;p&gt;OS는 태스크들의 상태를 바꿔주면서 실행하는 태스크를 결정하는 Scheduler역할을 한다.&lt;/p&gt;

&lt;h4 id=&quot;dormant수면&quot;&gt;DORMANT(수면)&lt;/h4&gt;

&lt;p&gt;Memory에는 있으나 실행할 수 없는 상태&lt;/p&gt;

&lt;h4 id=&quot;ready준비&quot;&gt;READY(준비)&lt;/h4&gt;

&lt;p&gt;CPU에서 실행중인 태스크보다 우선순위가 낮아서 대기하는 상태&lt;/p&gt;

&lt;h4 id=&quot;running실행&quot;&gt;RUNNING(실행)&lt;/h4&gt;

&lt;p&gt;CPU를 점유하고 있는 상태&lt;/p&gt;

&lt;h4 id=&quot;wating이벤트-발생-대기&quot;&gt;WATING(이벤트 발생 대기)&lt;/h4&gt;

&lt;p&gt;특정 이벤트를 대기하는 상태&lt;/p&gt;

&lt;p&gt;기다리고 있던 이벤트가 발생하면 Ready상태가 됨&lt;/p&gt;

&lt;h2 id=&quot;preemptive-kernel선점-커널&quot;&gt;Preemptive Kernel(선점 커널)&lt;/h2&gt;

&lt;p&gt;커널은 선점형 커널(Preemptive Kernel)과 비선점형(Non-preemptive Kernel)이 있다.&lt;/p&gt;

&lt;p&gt;비선점형 커널은 실행중인 태스크를 강제로 중단시키고 다른 태스크를 실행시킬 수 없는 커널이다. 단위시간당 처리능력이 중요한 범용 OS에서 사용한다.&lt;/p&gt;

&lt;p&gt;선점형 커널은 특정 태스크의 수행을 (우선순위에 따라) 중단 시키고 다른 태스크를 수행시킬 수 있는 커널이다. 임베디드시스템의 Deterministic(같은입력 같은결과)한 특성때문에 적합하다.&lt;/p&gt;

&lt;h2 id=&quot;reentrancy-재진입성&quot;&gt;Reentrancy (재진입성)&lt;/h2&gt;

&lt;p&gt;코드를 중단후 재실행 가능하다는 것을 의미한다.&lt;/p&gt;

&lt;h2 id=&quot;concurrency-동시성-문제&quot;&gt;Concurrency (동시성 문제)&lt;/h2&gt;

&lt;p&gt;다른 태스크가 동시에 공유자원에 액세스 했을 때 발생할 수 있는 문제를 의미한다.&lt;/p&gt;

&lt;p&gt;예를 들어 Task1이 어떤 변수를 연산중일 때 우선순위가 더높은 Task 2가 실행되어 그 변수의 메모리를 사용하면 의도한 연산에 문제가 발생 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;mutual-exclusion-상호-배제&quot;&gt;Mutual Exclusion (상호 배제)&lt;/h3&gt;

&lt;p&gt;이러한 동시성 문제를 해결하기 위해 여러방법의 테크닉을 이용한다.&lt;/p&gt;

&lt;h4 id=&quot;critical-sectionregion&quot;&gt;Critical Section(Region)&lt;/h4&gt;

&lt;p&gt;실행이 중단되면 안 되는 코드 영역을 만들어 (인터럽트를 포함한) 다른 코드의 수행을 막는다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Disable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wirte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Enable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;scheduling-금지&quot;&gt;Scheduling 금지&lt;/h4&gt;

&lt;p&gt;공유자원을 사용하는 동안 스케쥴링을 막는다&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Disable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Enable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;semaphore&quot;&gt;Semaphore&lt;/h4&gt;

&lt;p&gt;일반적을 사용되는 효율적인 방법이다.&lt;/p&gt;

&lt;p&gt;[]&lt;/p&gt;

&lt;p&gt;공유 자원을 액세스하기 위한 KEY라고 생각하면 이해하기 쉽다. 어떤 태스크가 세마포어를 가지고 작동중 일때 더 높은 우선순위의 태스크가 실행되어도 세마포어를 요구하면, 세마포어를 가진 태스크를 같거나 더높은 우선순위를 부여해서 이전 태스크가 세마포어를 반납 할 때 까지 WATING한다.&lt;/p&gt;

&lt;p&gt;[]&lt;/p&gt;

&lt;p&gt;또, 신호 전달 용도로 사용할 수 있다. 어떠한 작동이 필요한 높은 우선순위의 태스크를 WATING 상태로 두고, 작동이 되었을 때 세마포어를 증가시켜 스케쥴링 하는 방식이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ITC(InterTask Communication)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비슷한 원리로 태스크간 자원을 공유하는 Mailbox나 Message Queue같은 방식이있다.&lt;/p&gt;

&lt;h2 id=&quot;interrupt&quot;&gt;Interrupt&lt;/h2&gt;

&lt;p&gt;프로그램의 진행과 상관없이 Exception이 발생했을 때 하드웨어적인 Mechanism으로 어떤 동작을 실행시킨다. 주변장치가 CPU에게 Asynchronous Events를 알리는데 사용한다. (예를 들면 reset) . 인터럽트가 발생하면 ISR(Interrupt Service Routine)이라는 인터럽트가 발생했을 때 실행할 Service가 실행되고 종료한다.&lt;/p&gt;

&lt;p&gt;인터럽트 종료 후 동작은 커널의 종류에 따라 다르다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;비선점형 커널&lt;/p&gt;

    &lt;p&gt;ISR 전의 태스크 수행&lt;/p&gt;

    &lt;p&gt;[]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;선점형 커널은&lt;/p&gt;

    &lt;p&gt;ISR 종료 후 Scheduling&lt;/p&gt;

    &lt;p&gt;[]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인터럽트의 시간분류&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Interrupt Latency(인터럽트 지연시간)&lt;/p&gt;

    &lt;p&gt;인터럽트가 Disable된 최대시간 + ISR로 분기가 시작되는데 걸리는 시간(ISR로 분기가 시작될 때 까지의 소요시간)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interrupt Response(인터럽트 응답시간)&lt;/p&gt;

    &lt;p&gt;Interrupt Latency + CPU의 context를 저장하는 시간 + Kernel ISR entry funciton 실행시간(preemptive kernel only)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interrupt Recovery(인터럽트 복귀시간)&lt;/p&gt;

    &lt;p&gt;Higher priority task ready 여부 검토시간(preemptive only) + Running될 task의 context 복구시간 + 인터럽트로부터 복귀되는 명령 실행시간&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot;&gt;Interrupt&lt;/a&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><summary type="html">RTOS</summary></entry><entry><title type="html">Rtos</title><link href="http://localhost:4000/posts/RTOS" rel="alternate" type="text/html" title="Rtos" /><published>2019-07-29T00:00:00+09:00</published><updated>2019-07-29T00:00:00+09:00</updated><id>http://localhost:4000/posts/RTOS</id><content type="html" xml:base="http://localhost:4000/posts/RTOS">&lt;h1 id=&quot;rtos-porting--programming&quot;&gt;RTOS Porting &amp;amp; Programming&lt;/h1&gt;

&lt;h2 id=&quot;임베디드-시스템-및-rtos-개요&quot;&gt;임베디드 시스템 및 RTOS 개요&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;임베디드 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정한 목적을 수행하기 위해 필요한 하드웨어와 소프트웨어를 가지고 있는 시스템.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-Time(실시간) 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;주어진 입력 조건을 정해진 &lt;em&gt;시간 내에&lt;/em&gt; 처리하는 시스템&lt;/p&gt;

&lt;h3 id=&quot;arm-프로세서&quot;&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/ARM_%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98&quot;&gt;ARM 프로세서&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advanced RISC Machine&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;arm-보드의-최대강점&quot;&gt;ARM 보드의 최대강점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;저전력 프로세서&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;많은 반도체 회사들과 License를 맺고 ARM 기반 프로세서 생산&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cortex-profile-종류별-특성&quot;&gt;Cortex Profile 종류별 특성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cortex-A : Application용 - 스마트폰&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cortex-R : Real time용 (Embedded) - 자동차, 항공, 산업용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cortex-M : Microcontroller(MICOM) - 저가 시스템&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;arm-프로세서의-구조&quot;&gt;ARM 프로세서의 구조&lt;/h4&gt;

&lt;p&gt;ALU를 포함하는 CPU 격의 &lt;strong&gt;ARM CORE&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Cache, NVIC 등 Coprocessors를 포함하는 &lt;strong&gt;ARM Processor&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;제조사에서 만드는 I.C, DMA, UART, LCD, Timer, RTC 등 Peripherals을 포함하는 &lt;strong&gt;SoC&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;임베디드-시스템에서의-운영체제-필요성&quot;&gt;임베디드 시스템에서의 운영체제 필요성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;개발자가 직접 작성하는 펌웨어로 구현이 어려운 기능
    &lt;ul&gt;
      &lt;li&gt;네트워크&lt;/li&gt;
      &lt;li&gt;멀티미디어&lt;/li&gt;
      &lt;li&gt;다른 시스템과 호환성을 위한 기능(File system)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리얼타임의 필요성 부각(정해진 시간내에 처리)&lt;/li&gt;
  &lt;li&gt;멀티태스킹 기능 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제&quot;&gt;운영체제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;제한된 시스템 자원을 효율적으로 사용할 수 있도록 관리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴퓨터 시스템과 사용자간의 인터페이스 기능을 담당하여 사용자에게 편의 제공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴퓨터 시스템의 전반적인 동작을 제어하고 조정하는 시스템 프로그램들의 집합&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실시간-시스템-개념&quot;&gt;실시간 시스템 개념&lt;/h2&gt;

&lt;p&gt;펌웨어로 처리시 단점 1. 응답시간에 영향을 줌 2. 우선순위가 없음.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RTOS 사용 이유&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;실시간 이벤트에 대한 응답시간 향상&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;운선순위 부여하여 중요한 처리를 우선적으로 진행&lt;/li&gt;
  &lt;li&gt;시스템 확장 편의성&lt;/li&gt;
  &lt;li&gt;개발 효율성&lt;/li&gt;
  &lt;li&gt;커널이 제공하는 추가기능&lt;/li&gt;
  &lt;li&gt;유지보수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;태스크&quot;&gt;태스크&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;태스크 우선순위&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;태스크 스택&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;잠시동안 저장공간 사용&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;태스크에서 사용하는 레지스터 등 보존&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;태스크 상태(Dormant, Ready, Running, Wating)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\Embedded\task_diagram.jpg&quot; alt=&quot;task_diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scheduler : 가장 높은 우선순위의 태스크를 선택하는 방식&lt;/p&gt;

&lt;p&gt;preemptive Kernel(선점형 커널) : 특정 태스크의 수행을 중단 시키고 다른 태스크를 수행시킬 수 있는 커널&lt;/p&gt;

&lt;p&gt;Reentrancy(재진입성) : 코드의 재진입이 가능(중단 후 재실행 가능)&lt;/p&gt;

&lt;p&gt;Concurrency(동시성 문제) : 동시에 공유자원에 액세스 했을 때 발생할 수 있는 문제&lt;/p&gt;

&lt;p&gt;동시성 문제 해결법 -&amp;gt; Mutual Exclusion&lt;/p&gt;

&lt;p&gt;Mutual Exclusion&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Critical Section(Region)&lt;/p&gt;

    &lt;p&gt;인터럽트를 포함한 다른 코드의 수행에 의해 중단 되어서는 안되는 영역&lt;/p&gt;

    &lt;p&gt;간단하지만 인터럽트 금지 시간이 길어지면 문제 발생&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공유자원 사용하는 동안 Scheduling 금지&lt;/p&gt;

    &lt;p&gt;높은 우선순위의 태스크가 CPU를 점유하는 시점이 지연될 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Semaphore(공용키) 사용&lt;/p&gt;

    &lt;p&gt;우선순위가 높아도 Semaphore를 다른 태스크가 가지고 있으면 Wait상태가 됨&lt;/p&gt;

    &lt;p&gt;공유자원의 access time이 짧은 경우 위의 두 방법이 더 효과적일 수 있음&lt;/p&gt;

    &lt;p&gt;멀티코어에서는 위미가 없음, (스핀락 사용)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deadlock : 다른 태스크에서 사용 중인 자원을 무한히 기다리는 상태&lt;/p&gt;

&lt;p&gt;Deadlock방지&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;순서대로 자원 획득, 역순으로 자원 양도&lt;/li&gt;
  &lt;li&gt;타임아웃을 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interrupts&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Embedded" /><category term="Embedded" /><category term="RTOS" /><summary type="html">RTOS Porting &amp;amp; Programming</summary></entry><entry><title type="html">Term</title><link href="http://localhost:4000/posts/Term" rel="alternate" type="text/html" title="Term" /><published>2019-07-27T00:00:00+09:00</published><updated>2019-07-27T00:00:00+09:00</updated><id>http://localhost:4000/posts/Term</id><content type="html" xml:base="http://localhost:4000/posts/Term">&lt;p&gt;Modem : Modulator + Demodulator&lt;/p&gt;

&lt;p&gt;Codec : Coder + Decoder&lt;/p&gt;

&lt;p&gt;비메모리&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/후킹&quot;&gt;후킹&lt;/a&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><summary type="html">Modem : Modulator + Demodulator</summary></entry><entry><title type="html">추천교재</title><link href="http://localhost:4000/posts/book" rel="alternate" type="text/html" title="추천교재" /><published>2019-07-27T00:00:00+09:00</published><updated>2019-07-27T00:00:00+09:00</updated><id>http://localhost:4000/posts/book</id><content type="html" xml:base="http://localhost:4000/posts/book">&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Clean Code&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;윤성우의 열혈 자료구조&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;a href=&quot;http://order.kyobobook.co.kr/cart/cartListMain#&quot;&gt;C로 배우는 알고리즘 1&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;C++ STL&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Effective C++&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;알고리즘 문제 해결 전략 세트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Clean Software&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;GoF의 디자인 패턴&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code Complete&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;생각하는 프로그래밍&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;리팩토링 : 코드 품질을 개선하는 객체지향 사고법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Inntroduction to Algorithms&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;컴퓨터 프로그램의 구조와 해석&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;컴퓨터시스템구조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;운영체제&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;컴퓨터 구조 및 설계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;임베디드 레시피&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;ARM 리눅스 커널&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;해커의 기쁨&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=899792&quot;&gt;인사이드 머신&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=18480581&quot;&gt;리눅스 커널 심층 분석&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;a href=&quot;http://order.kyobobook.co.kr/cart/cartListMain#&quot;&gt;임베디드 리눅스 프로그래밍 완전정복&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;a href=&quot;http://order.kyobobook.co.kr/cart/cartListMain#&quot;&gt;코드로 알아보는 ARM 리눅스 커널&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><summary type="html">Clean Code 윤성우의 열혈 자료구조 C로 배우는 알고리즘 1</summary></entry><entry><title type="html">Software Study Plan</title><link href="http://localhost:4000/posts/Plan" rel="alternate" type="text/html" title="Software Study Plan" /><published>2019-07-27T00:00:00+09:00</published><updated>2019-07-27T00:00:00+09:00</updated><id>http://localhost:4000/posts/Plan</id><content type="html" xml:base="http://localhost:4000/posts/Plan">&lt;p&gt;‘소프트웨어를 쉽게 배우는 방법은 없을까?’&lt;/p&gt;

&lt;p&gt;소프트웨어를 배우기 시작하면서 항상 고민했던 질문이다. 지금 생각해보면 배움에 있어서 쉬운길은 없는건 당연한 것 같다. 쉽게 얻을수록 쉽게 잃는게 이치다. 하지만 배움에 흥미를 잃지않는 방법은 분명히 있다. 한 블로그에서 본 글이 와닿아서 &lt;a href=&quot;https://hl1itj.tistory.com/133?category=327240&quot;&gt;링크&lt;/a&gt;를 걸어본다. 어떻게 프로그래밍을 배우면 지치지 않고 배울 수 있을지 깨닫게 된다.&lt;/p&gt;

&lt;p&gt;이 블로그 주인분께서 쓰신 &lt;a href=&quot;https://hl1itj.tistory.com/136?category=327240&quot;&gt;다른 포스팅&lt;/a&gt;이 또 매우 인상적이었다. 소프트웨어 개발자가 되기위해서 겪어야할 어려움을 단계별로 정리해놓으셨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1단계 : 언어&lt;/li&gt;
  &lt;li&gt;2단계 : 데이터&lt;/li&gt;
  &lt;li&gt;3단계 : 프레임워크&lt;/li&gt;
  &lt;li&gt;4단계 : 알고리즘&lt;/li&gt;
  &lt;li&gt;5단계 : 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지금 내가 있는 단계는 어딜까 생각해 봤는데 고작.. 2단계 초반이 아닐까 싶다… 아쉽지만 대부분의 컴퓨터공학 전공 학부생은 2단계 ~ 3단계에 분포하지 않을까싶다..(이렇게라도 자기위로를). 언어에 대한 기본적인 지식은 있지만, 포인터와 자료구조 등 개념을 알지만 언제 어디서 써야하는지 알지못하는 부족함이 있다.. 이부분을 남에게 가르쳐줄 수준으로 공부를 해야 다음단계인 표준 라이브러리나 기존에 누군가가 짜놓은 코드를 완벽히 이해할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;사설이 길었지만 어쨌든 앞으로의 학습계획을 짜보자.&lt;/p&gt;

&lt;p&gt;소프트웨어 공부는 크게 두가지로 분류할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;언어 공부(C, C++, 파이썬)&lt;/li&gt;
  &lt;li&gt;컴퓨터과학(컴퓨터구조, 운영체제, 네트워크, 데이터베이스 등…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;첫째는 소트트웨어를 만드는 도구인 언어를 공부하는 것이고, 둘째는 소프트웨어가 어떻게 구동되는지 기존에 만들어놓은 커다란 이론적인 아키텍처를 공부하는것이다.&lt;/p&gt;

&lt;p&gt;소프트웨어를 만들기 위해서는 하나이상의 언어를 자유자재로 다룰줄 알아야 어떤 기획을 했을때 막힘없이 구현할 수 있다. 머리로 아무리 좋은 프로그램을 만들어도 언어능력이 부족하면 무용지물이다.&lt;/p&gt;

&lt;p&gt;내가 &lt;strong&gt;임베디드 개발자&lt;/strong&gt;가 되기로한 이상 C는 무조건 마스터해야하지만, C만으로는 응용프로그램을 만들기엔 굉장히 비생산적이다. 그러므로 C++과, 파이썬을 더 공부하려한다.&lt;/p&gt;

&lt;p&gt;또한, 임베디드 분야는 하드웨어와 밀접한 Low한 레벨의 데이터를 다루기 때문에 하드웨어아키텍처의 이론적인 구조과 그 데이터를 관리하고 다루는 방법을 알아야 한다. 그러기 위해 컴퓨터구조, 운영체제, 네트워크, 데이터베이스를 배우려는 것이다.&lt;/p&gt;

&lt;p&gt;사실 C/C++, 파이썬, 네트워크, 데이터베이스 등 컴퓨터공학을 부전공하면서 1년간 어느정도 수업을 들었지만 완전히 내것으로 만들지는 못했다.&lt;/p&gt;

&lt;p&gt;그러한 지식들을 다시한번 복기하면서 다음과같은 순서로 포스팅 하려고한다.&lt;/p&gt;

&lt;p&gt;앞으로의 공부 순서도&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;우선순위&lt;/th&gt;
      &lt;th&gt;언어&lt;/th&gt;
      &lt;th&gt;컴퓨터과학&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C 복습&lt;/td&gt;
      &lt;td&gt;컴퓨터 구조&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;자료구조&lt;/td&gt;
      &lt;td&gt;시스템(프로세스) 아키텍처&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;C++ 복습&lt;/td&gt;
      &lt;td&gt;운영체제&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;C++ API 디자인패턴&lt;/td&gt;
      &lt;td&gt;데이터베이스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Effective C++&lt;/td&gt;
      &lt;td&gt;네트워크&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;파이썬 복습&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;여기에 요즘 취업을 위해 필수적인 &lt;strong&gt;알고리즘&lt;/strong&gt; 공부를 꾸준하게 하려고한다.&lt;/p&gt;

&lt;p&gt;컴퓨터 구조&lt;/p&gt;

&lt;p&gt;https://covenant.tistory.com/103?category=773722&lt;/p&gt;

&lt;p&gt;운영체제 공부&lt;/p&gt;

&lt;p&gt;https://covenant.tistory.com/100?category=773722&lt;/p&gt;

&lt;p&gt;http://www.kocw.net/home/search/kemView.do?kemId=978503&lt;/p&gt;

&lt;p&gt;http://www.kocw.net/home/m/search/kemView.do?kemId=998138&lt;/p&gt;

&lt;p&gt;http://blog.naver.com/PostList.nhn?blogId=hjyang0&amp;amp;parentCategoryNo=6&lt;/p&gt;

&lt;p&gt;http://snui.snu.ac.kr/ocw/index.php?mode=view&amp;amp;id=623#class_room-tab&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="story" /><summary type="html">‘소프트웨어를 쉽게 배우는 방법은 없을까?’</summary></entry></feed>