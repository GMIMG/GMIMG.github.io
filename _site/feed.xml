<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2018-11-28T21:18:32+09:00</updated><id>http://localhost:4000/</id><title type="html">GMIMG</title><subtitle>Mechagrammer</subtitle><author><name>Jimin Hwang</name></author><entry><title type="html">C++ inheritance</title><link href="http://localhost:4000/posts/C++-Inheritance" rel="alternate" type="text/html" title="C++ inheritance" /><published>2018-11-20T00:00:00+09:00</published><updated>2018-11-20T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Inheritance</id><content type="html" xml:base="http://localhost:4000/posts/C++-Inheritance">&lt;h1 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h1&gt;
&lt;p&gt;class DERIVED_CLASS: public BASE_CLASS&lt;/p&gt;

&lt;p&gt;‘Derived class’ derived ‘member variables’, ‘member functions’ from ‘base class’&lt;/p&gt;

&lt;p&gt;NOT inherited&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//construct
HourlyEmployee :: HourlyEmployee ()
    : Employee() , wageRate (0), hours(0) 
{
    //Deliberately empty
}
HourlyEmployee :: HourlyEmployee(string theName, string theNumber, double theWageRate)
    : Employee(theName, theNumber), wageRate (theWageRate), hours(theHours)
{
    //Deliberately empty 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;protected&quot;&gt;Protected&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/C++/InhariteProtected.JPG&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="C++" /><category term="Inheritance" /><summary type="html">Inheritance class DERIVED_CLASS: public BASE_CLASS</summary></entry><entry><title type="html">Wired LANs Ethernet &amp;amp; Other Wired Networks</title><link href="http://localhost:4000/posts/Wired-LANs" rel="alternate" type="text/html" title="Wired LANs Ethernet &amp; Other Wired Networks" /><published>2018-11-13T00:00:00+09:00</published><updated>2018-11-13T00:00:00+09:00</updated><id>http://localhost:4000/posts/Wired%20LANs</id><content type="html" xml:base="http://localhost:4000/posts/Wired-LANs">&lt;h1 id=&quot;ehternet&quot;&gt;Ehternet&lt;/h1&gt;

&lt;p&gt;IEEE Project 802&lt;/p&gt;

&lt;h2 id=&quot;ethernet-protocol&quot;&gt;Ethernet protocol&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;TCP/IP protocol&lt;/li&gt;
  &lt;li&gt;Local area network(LAN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IEEE standard for LANs&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/IEEE802LAN.JPG&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;standard-ehternet&quot;&gt;Standard Ehternet&lt;/h2&gt;

&lt;p&gt;: data rate of 10 Mbps&lt;/p&gt;

&lt;h3 id=&quot;characteristics&quot;&gt;Characteristics&lt;/h3&gt;

&lt;p&gt;connectionless and Unrealiable Service&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each frame sent is independent of the previous or next frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ethernet frame&lt;/p&gt;

&lt;p&gt;| Preamble | SFD | Destination address | Source address | Type | Data and padding | CRC |
|:——–:|—–|———————|—————-|——|——————|—–|&lt;/p&gt;

&lt;h3 id=&quot;addressing&quot;&gt;Addressing&lt;/h3&gt;

&lt;p&gt;The Ethernet address is 6 bytes (48bits)&lt;/p&gt;

&lt;p&gt;첫번째 Byte에는 Unicast, Multicast, BroadCast Addresses 정보가 들어있음.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unicast : 짝수&lt;/p&gt;

    &lt;p&gt;All stations will receive the frame, the intended recipient keeps and handles the frame; the rest discard it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multicast : 홀수&lt;/p&gt;

    &lt;p&gt;All stations will receive the frame, the stations that are members of the group keep and handle it; the rest discard it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Broadcast : FF&lt;/p&gt;

    &lt;p&gt;All stations (except the sender) will receive the frame and all stations (except the sender) keep and handle it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-method&quot;&gt;Access Method&lt;/h3&gt;

&lt;p&gt;The standard Ethernet chose CSMA/CD with 1-persistent method.&lt;/p&gt;

&lt;p&gt;최소프레임길이 예제&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;10BaseX&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data rate 10 Mbps&lt;/li&gt;
  &lt;li&gt;Base means baseband (digital) signal&lt;/li&gt;
  &lt;li&gt;X
approximately defines either the maximum size of the cable in 100 meters. Or, the type of cable, T for unshielded twisted pair cable (UTP) and F for fiber-optic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;10Base5 : Thick Ethernet
10Base2 : Thin Ethernet
10Base-T : Twisted-Pair Ethernet
10Base-F : Fiber Ethernet&lt;/p&gt;

&lt;h2 id=&quot;fast-ethernet&quot;&gt;FAST Ethernet&lt;/h2&gt;

&lt;h2 id=&quot;gigabit-ethernet&quot;&gt;GIGABIT Ethernet&lt;/h2&gt;

&lt;h2 id=&quot;10-gigabit-ethernet&quot;&gt;10-GIGABIT Ethernet&lt;/h2&gt;

&lt;h1 id=&quot;other-wired-networks&quot;&gt;Other wired Networks&lt;/h1&gt;

&lt;h2 id=&quot;telephone-network&quot;&gt;telephone network&lt;/h2&gt;

&lt;h2 id=&quot;the-cable-network&quot;&gt;The cable network&lt;/h2&gt;

&lt;h2 id=&quot;synchronous-optical-network-sonet&quot;&gt;Synchronous Optical Network (SONET)&lt;/h2&gt;

&lt;p&gt;a wide area network(WAN), SONET, that is used as a transport network to carry loads from other WANs.&lt;/p&gt;

&lt;p&gt;SONET/SDH is a synchronous network using synchronous TDM multiplexing.&lt;/p&gt;

&lt;p&gt;SONET&lt;/p&gt;

&lt;h2 id=&quot;atm&quot;&gt;ATM&lt;/h2&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><summary type="html">Ehternet</summary></entry><entry><title type="html">Media access control(mac)</title><link href="http://localhost:4000/posts/Media-Access-Control(MAC)" rel="alternate" type="text/html" title="Media access control(mac)" /><published>2018-11-12T00:00:00+09:00</published><updated>2018-11-12T00:00:00+09:00</updated><id>http://localhost:4000/posts/Media%20Access%20Control(MAC)</id><content type="html" xml:base="http://localhost:4000/posts/Media-Access-Control(MAC)">&lt;h1 id=&quot;mac&quot;&gt;MAC&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Random access&lt;/li&gt;
  &lt;li&gt;Controlled access&lt;/li&gt;
  &lt;li&gt;Channelization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;random-access-protocols&quot;&gt;Random access Protocols&lt;/h2&gt;

&lt;p&gt;Each station can transmit when it desires on the condition that it follows the predefined procedure. including testing the state of the medium. If more than one station tries to send, there is an access conflict. i.e., collision.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ALOHA&lt;/li&gt;
  &lt;li&gt;CSMA&lt;/li&gt;
  &lt;li&gt;CSMA/CD&lt;/li&gt;
  &lt;li&gt;CSMA/CA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aloha-protocol&quot;&gt;ALOHA protocol&lt;/h3&gt;

&lt;p&gt;‘Pure ALOHA’&lt;/p&gt;

&lt;p&gt;Each station sends a frame whenever it has a frame to send (multiple access), but possibility of collision. If collided needto resend the frames that have been destroyed during transmission. Pure ALOHA protocol relies on acknowledgments from the receiver. If the acknowledgment does not arrive after a time-out period. the station assumes that the frame (or the acknowledgment) has been destoryed and resends the frame.&lt;/p&gt;

&lt;p&gt;‘Binary exponential backoff’&lt;/p&gt;

&lt;p&gt;For each retransmission, a multiplier R = 0 to 2^k -1 is randomly chosen and multiplied by t(p)(maximum propagation time) or T(fr)(the average time required to send out a frame) to find T(B).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/BinaryExponentialBackoff.JPG&quot; alt=&quot;BinaryExponentialBackoff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘Vulnerable time’&lt;/p&gt;

&lt;p&gt;Length of time in which there is a possibility of collision.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/VulnerableTime.JPG&quot; alt=&quot;VulnerableTime&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘Throughput’&lt;/p&gt;

&lt;p&gt;The throughput for pure ALOHA is S= G x e^(-2G)
The maximum throughput S(max)= 1/(2e) = 0.184 when G=(1/2)&lt;/p&gt;

&lt;p&gt;‘Slotted ALOHA’&lt;/p&gt;

&lt;p&gt;Invented to improve the efficiency of pure ALOHA. Divide the time into slots of T(fr) seconds and force the station to send only at the beginning of the time slot. 시작지점을 정해줌. Vulnerable time = T(fr), Throughput S = G x E^(-G), S(max) = 0.368 when G=1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/VulnerableTime.JPG&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;csma&quot;&gt;CSMA&lt;/h3&gt;

&lt;p&gt;Carrier sense multiple access (CSMA)&lt;/p&gt;

&lt;p&gt;To minimize the chance of collision and, therefore, increase the performance. 눈치를 보고 보냄.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1-persistent&lt;/li&gt;
  &lt;li&gt;Nonpersistent&lt;/li&gt;
  &lt;li&gt;p-persistent&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;csmacd&quot;&gt;CSMA/CD&lt;/h3&gt;

&lt;h3 id=&quot;csmaca&quot;&gt;CSMA/CA&lt;/h3&gt;

&lt;p&gt;For wireless networks. Collisions are avoided through the use of CSMA/CA’s three strategies: Interframe space, Contention window, and Acknowledgments.&lt;/p&gt;

&lt;h2 id=&quot;controlled-access&quot;&gt;Controlled access&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Reservation&lt;/li&gt;
  &lt;li&gt;Polling&lt;/li&gt;
  &lt;li&gt;Token passing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;channelization&quot;&gt;Channelization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FDMA&lt;/li&gt;
  &lt;li&gt;TDMA&lt;/li&gt;
  &lt;li&gt;CDMA&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><summary type="html">MAC</summary></entry><entry><title type="html">Jekyll</title><link href="http://localhost:4000/posts/jekyll" rel="alternate" type="text/html" title="Jekyll" /><published>2018-11-07T00:00:00+09:00</published><updated>2018-11-07T00:00:00+09:00</updated><id>http://localhost:4000/posts/jekyll</id><content type="html" xml:base="http://localhost:4000/posts/jekyll">&lt;h1 id=&quot;뭥미&quot;&gt;뭥미&lt;/h1&gt;
&lt;!--
~~~
https://www.mattcrampton.com/blog/checking_if_a_variable_is_set_in_jekyll/










https://github.com/Shopify/liquid/issues/223#issuecomment-376816247


To summarize, here's a table of the boolean value of various values (jekyll 3.7.3, liquid 4.0.0):

Operator	nil	&quot;&quot;	&quot; &quot;
var	false	true	true
var == blank	false	false	false
var == empty	false	true	false
var == &quot;&quot;	false	true	false
var == nil	true	false	false
Generated with statements like false

- Empty strings are &quot;truthy&quot;, unlike in most languages
- No operator returns true for both undefined (nil) and empty strings. Use 'or' as suggested above (var == nil or var == empty)
- blank doesn't seem to work for strings. By analogy to the rails blank? operator, I would have expected both &quot;&quot; and &quot; &quot; to be blank, but liquid seems to only define it for certain custom datatypes.
~~~
--&gt;</content><author><name>Gmimg</name></author><category term="jekyll" /><summary type="html">뭥미 &amp;lt;!– ~~~ https://www.mattcrampton.com/blog/checking_if_a_variable_is_set_in_jekyll/</summary></entry><entry><title type="html">C++ c String and string</title><link href="http://localhost:4000/posts/C++-C-string-and-String" rel="alternate" type="text/html" title="C++ c String and string" /><published>2018-11-06T00:00:00+09:00</published><updated>2018-11-06T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20C-string%20and%20String</id><content type="html" xml:base="http://localhost:4000/posts/C++-C-string-and-String">&lt;h1 id=&quot;c-string&quot;&gt;C-String&lt;/h1&gt;

&lt;p&gt;c언어에서 쓰던 것과 같다. 1byte type인 char의 배열이라고 볼수있다. 그리고 크기는 글자수 + 1 byte 이상인데 이 1byte는 null character(‘\o’)로 구성되어있어야 C-String으로 인식하고 내장함수를 사용할 수 있다. Array with base type char, End of string marked with null, “\0”. If null overwritten, c-string no longer “acts” like c-string!&lt;/p&gt;

&lt;p&gt;char ourString[5] = “Hi”;
// char ourString[] = “Hi”; =&amp;gt; legal
// char ourString = “Hi”; =&amp;gt; illegal&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ourString[1] =&amp;gt; “H”&lt;/li&gt;
  &lt;li&gt;ourString[2] =&amp;gt; “i”&lt;/li&gt;
  &lt;li&gt;ourString[3] =&amp;gt; “\0”&lt;/li&gt;
  &lt;li&gt;ourString[4] =&amp;gt; ?&lt;/li&gt;
  &lt;li&gt;ourString[5] =&amp;gt; ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Require library &amp;lt;cstring&amp;gt;&lt;/p&gt;

&lt;p&gt;cannot use operator ‘==’&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;strcmp(a, b) : ==&lt;/li&gt;
  &lt;li&gt;strcat(a, b, [limit]) : +&lt;/li&gt;
  &lt;li&gt;strcpy(a, b, [limit]) : copy&lt;/li&gt;
  &lt;li&gt;strlan(a) : length&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;cin.getline(a, 80);
char nextSymbol;
cin.get(nextSymbol);
cout.put(&quot;a&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;cin.putback()&lt;/li&gt;
  &lt;li&gt;peekChar = cin.peek();&lt;/li&gt;
  &lt;li&gt;cin.ignore(1000, “\n”);&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cctype&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tolower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// isupper();
// islower();
// isalpha(); (alphabat)
// isdigit();
// isalnum();
// isspace();
// ispunct(); (?)
// isprint();
// isgraph();
// isctrl();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;class-string&quot;&gt;Class string&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std ;
void newLine();

int main(){
string s1, s2, s3, s4, s5, s6;
s3 = s1 + s2; //Concatenation
s3 = &quot;Hello Mom!&quot; //Assignment
getline(cin, s4);
cin &amp;gt;&amp;gt; s5;
newLine();
}
void newLine() //clear buffer
{
	char nextChar ;
	do
	{
	cin.get (nextChar );
	} while (nextChar != ' \n');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;.at(i)&lt;/li&gt;
  &lt;li&gt;.substr(position, length)&lt;/li&gt;
  &lt;li&gt;.length()&lt;/li&gt;
  &lt;li&gt;.empty()&lt;/li&gt;
  &lt;li&gt;.insert(pos, str2)&lt;/li&gt;
  &lt;li&gt;.remove(pos, length)&lt;/li&gt;
  &lt;li&gt;.find(str1, [start_pos])&lt;/li&gt;
  &lt;li&gt;.find_first_of(str1, pos)&lt;/li&gt;
  &lt;li&gt;=,+=&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//class string =&amp;gt; c-String
char aCString[]= &quot;my C-string&quot;;
string stringVar;
stringVar = aCstring;
strcpy(aCString, stringVar.c_str());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;int i;
double d;
string s;
i = stoi(&quot;35&quot;);
d = stod(&quot;2.5&quot;);
s = to_string(d*2);
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Demonstrates getline and cin.get.
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter two strings.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;They are not anagrams.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;They are anagrams!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gmimg</name></author><category term="C++" /><category term="String" /><summary type="html">C-String</summary></entry><entry><title type="html">Data link control</title><link href="http://localhost:4000/posts/Data-Link-Control" rel="alternate" type="text/html" title="Data link control" /><published>2018-11-06T00:00:00+09:00</published><updated>2018-11-06T00:00:00+09:00</updated><id>http://localhost:4000/posts/Data%20Link%20Control</id><content type="html" xml:base="http://localhost:4000/posts/Data-Link-Control">&lt;h1 id=&quot;data-link-control&quot;&gt;Data Link Control&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;general serviece DLC Sublayer&lt;/li&gt;
  &lt;li&gt;Data link protocols&lt;/li&gt;
  &lt;li&gt;HDLC&lt;/li&gt;
  &lt;li&gt;PPP&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;general-service-dlc-sublayer&quot;&gt;General service DLC Sublayer&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;DLC&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MAC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PHY&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;DLC,MAC -&amp;gt; 2계층 -&amp;gt; pack bits into ‘frames’
PHY-&amp;gt; 1계층 -&amp;gt; bit synchronization&lt;/p&gt;

&lt;p&gt;frames 에는 sender와 recevier의 addresses가 정의된다. Fixed-size framing과 Variable-size framing으로 나뉜다.&lt;/p&gt;

&lt;p&gt;| Flag | Header | DATA from upper layer | Trailer | Flag |
|:—-:|——–|———————–|———|——|&lt;/p&gt;

&lt;h3 id=&quot;charater-orientedbyte-oriented-framing&quot;&gt;Charater-Oriented(byte-oriented) Framing&lt;/h3&gt;

&lt;p&gt;byte단위로 보내준다. 8-bit Charater로 data를 보낸다. Header는 8bits의 배수이다.
내용에 Flag와 같은 패턴의 bit가 들어갔을 때 ESC(special byte)를 해당 bit앞에 붙여줌, ESC가 들어가도 ESC를 붙여준다. 
Trailer에는 CRC가 들어간다.&lt;/p&gt;

&lt;h3 id=&quot;bit-oriented-framing&quot;&gt;Bit-Oriented Framing&lt;/h3&gt;

&lt;p&gt;‘Bit stuffing and unstuffing’&lt;/p&gt;

&lt;p&gt;Data에 Flag와 같은 패턴의 bit가 들어갔을 때 extra bits를 붙여준다. Flag가 01111110인 경우(FDLC, PPP) 11111이 나왔을때 다음에 0비트를 붙여서 송신해서 Flag와 같은 패턴이 나올 수 없게 방지한다.&lt;/p&gt;

&lt;p&gt;‘Flow Control’&lt;/p&gt;

&lt;p&gt;Balancing between proudction and consumption rates. Feedback from the receiving node to the sending node to stop or slow down pushing frames.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Buffers가 발생&lt;/p&gt;

&lt;p&gt;‘Error Control’&lt;/p&gt;

&lt;p&gt;CRC is added to the frame by the sender and checked by the receiver.&lt;/p&gt;

&lt;p&gt;보통 수신자에서 송신자로 보내는 Acknowledgment(ACK)로 둘을 한꺼번에 하게된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connection-Oriented Protocol&lt;/p&gt;

    &lt;p&gt;계속 Data를 주고받으며 연결이 되어있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connectionless Protocol&lt;/p&gt;

    &lt;p&gt;Wifi같이 필요할 때에 Data를 주고받으며 연결이 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-link-layer-protocols&quot;&gt;Data-link layer protocols&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Simple&lt;/li&gt;
  &lt;li&gt;Stop-and-Wait&lt;/li&gt;
  &lt;li&gt;Go-Back-N&lt;/li&gt;
  &lt;li&gt;Selective-Report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protocol을 표현하는 방법은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FSM (Finite state machine)&lt;/p&gt;

    &lt;p&gt;FSM은 오직 ready state만 가지고있다. sending machine은 request가 오기전까지 ready state에 남아있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MSC (Message sequence chart)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stop-and-wait&quot;&gt;Stop-and-Wait&lt;/h3&gt;

&lt;p&gt;Using both flow and error control. Sender sends one frame at a time and waits for an acknowledgment before sending the next one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/StopAndWaitFSM.JPG&quot; alt=&quot;StopAndWaitFSM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Data_communication/StopAndWaitMSC.JPG&quot; alt=&quot;StopAndWaitFSM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sequence and ACK에 Numbering을 하여 duplicate packets을 방지 한다.&lt;/p&gt;

&lt;p&gt;‘Piggybacking’&lt;/p&gt;

&lt;p&gt;양방향 통신에서 ack자체의 헤더와 CRC가 큰 data를 차지해서 send data안에 ack 자리를 내주어 같이보냄.&lt;/p&gt;

&lt;h2 id=&quot;hdlc&quot;&gt;HDLC&lt;/h2&gt;

&lt;p&gt;High-level Data Link Control (HDLC) is a bit-oriented protocl for communication over point-to-point and multipoint links. It implements the Stop-and-Wait protocol&lt;/p&gt;

&lt;p&gt;Configuration and Transfer Modes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Normal response mode (NRM)&lt;/p&gt;

    &lt;p&gt;요청과을 하면 대답을 하는 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asynchronous balanced mode (ABM)&lt;/p&gt;

    &lt;p&gt;요청과 대답을 동시에 보냄&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;framing&quot;&gt;Framing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Information frames (I-frames)&lt;/p&gt;

    &lt;p&gt;Used to data-link user data and control information relating to user data (piggybacking)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Supervisory frames (S-frames)&lt;/p&gt;

    &lt;p&gt;Used only to transport contol information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unnumbered frames (U-frames)&lt;/p&gt;

    &lt;p&gt;Reserved for system management&lt;br /&gt;
information carried by U-frames is intended for managing the link itself&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| Flag | Address | Control | (Information) | FCS | Flag |
|:—-:|———|———|—————|—–|——|&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Flag field&lt;/p&gt;

    &lt;p&gt;synchronization pattern&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Address field&lt;/p&gt;

    &lt;p&gt;the address of the secondary station.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;primary station : to address&lt;/li&gt;
      &lt;li&gt;secondary station : from address&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Control field&lt;/p&gt;

    &lt;p&gt;flow and error control&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Information field&lt;/p&gt;

    &lt;p&gt;user’s data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FCS field&lt;/p&gt;

    &lt;p&gt;2- or 4-byte CRC&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;point-to-point-protocol-ppp&quot;&gt;Point-to-Point Protocol (PPP)&lt;/h2&gt;

&lt;p&gt;| Flag | Address | Control | Protocol | Payload | FCS | Flag |
|:—-:|———|———|———-|———|—–|——|&lt;/p&gt;

&lt;p&gt;PPP defines the format of the frame to be exchanged between devices.&lt;/p&gt;

&lt;p&gt;PPP does not provide flow contol.&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><summary type="html">Data Link Control</summary></entry><entry><title type="html">C++ operator overloading</title><link href="http://localhost:4000/posts/C++-Operator-Overloading" rel="alternate" type="text/html" title="C++ operator overloading" /><published>2018-10-30T00:00:00+09:00</published><updated>2018-10-30T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Operator%20Overloading</id><content type="html" xml:base="http://localhost:4000/posts/C++-Operator-Overloading">&lt;ol&gt;
  &lt;li&gt;Operator overloading&lt;/li&gt;
  &lt;li&gt;Friend function, friend class&lt;/li&gt;
  &lt;li&gt;Reference (&amp;amp;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;operator-overloading&quot;&gt;Operator overloading&lt;/h1&gt;

&lt;p&gt;+, -, %, ++, –, », «, and []. Operator 는 사실 function과 같다. +(x,7) 에서 +는 함수 이름, x와 7은 arguments이고 Function “+”는 arguments의 sum을 return한다. 그리고 이는 x + 7 이라는 syntax로 호출 할 수 있다.&lt;/p&gt;

&lt;p&gt;+, -, = , %, ==, /, * 과 같은 연산자가 이미 C++에 built-in 되어있으며 우리는 이를 overload 할 수 있다.[Parameter and overloading 참조] (단, 당연히 유사한 기능을 할 때 overload하는게 좋다.)&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//example declaration
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;constant를 사용하는 이유 : 클래스의 객체에서 기본 할당 연산자는 두 객체를 같은 객체로 만들지 않고 하나의 객체에서 다른 객체로만 구성원 변수의 값을 복사합니다. Constant functions not allowed to alter class member data. Constant objects can ONLY call constant member functions. Any member function that will NOT modify data should be made const. Use keyword const after function declaration and heading.&lt;/p&gt;

&lt;p&gt;unary operation(단항 연산자) : y= -x, x++ 같은 항이 하나인 연산을 말한다.&lt;/p&gt;

&lt;h2 id=&quot;friend-function-of-a-class&quot;&gt;Friend function of a class&lt;/h2&gt;

&lt;p&gt;멤버 함수가 아니다. private 멤버에 직접적인 접근을 가진다. overhead 없어서 더욱 효율적이다. 모든 함수에 사용할 수 있고, Operator overload에 주로 사용한다. Avoids need to call accessor/mutator member functions&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/C++/Friend_function.JPG&quot; alt=&quot;Friend function&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references참조&quot;&gt;References(참조)&lt;/h2&gt;

&lt;p&gt;변수에 별칭을 지정합니다. Name of a storage location. Similar to “pointer”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//class, operator overloading 예제
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;cmath&amp;gt;
using namespace std;
//Class for amounts of money in U.S. currency.
class Money
{
public:
	Money();
	Money(double amount);
	Money(int theDollars, int theCents);
	Money(int theDollars);
	double getAmount() const;
	int getDollars() const;
	int getCents() const;

	friend bool operator&amp;lt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;lt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;gt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;gt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	const Money percent(int percentFigure) const;
	//Returns percentFigure percent of Money.
	//Example: If percentFigure is 10, a Money object is returned that
	//represents 0.1 of the amount of money of the calling object
	//If purse is a Money object representing $100.20, purse.percent(10)
	//is a Money object representing $10.02.

	friend const Money operator +(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend const Money operator -(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend bool operator ==(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend const Money operator -(const Money&amp;amp; amount);
	friend ostream&amp;amp; operator &amp;lt;&amp;lt;(ostream&amp;amp; outputStream, const Money&amp;amp; amount);
	friend istream&amp;amp; operator &amp;gt;&amp;gt;(istream&amp;amp; inputStream, Money&amp;amp; amount);
private:
	int dollars; //A negative amount is represented as negative dollars and
	int cents; //negative cents. Negative $4.50 is represented as -4 and -50
	int dollarsPart(double amount) const;
	int centsPart(double amount) const;
	int round(double number) const;
};
int main()
{
	int percen;
	Money yourAmount, myAmount(10, 9);
	cout &amp;lt;&amp;lt; &quot;Enter an amount of money: &quot;;
	cin &amp;gt;&amp;gt; yourAmount;
	cout &amp;lt;&amp;lt; &quot;a percent you wish to take of your amount\n&quot;;
	cin &amp;gt;&amp;gt; percen;

	Money yourperAmount = yourAmount.percent(percen);
	cout &amp;lt;&amp;lt; &quot;Your amount is &quot; &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &quot;My amount is &quot; &amp;lt;&amp;lt; myAmount &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; percen &amp;lt;&amp;lt; &quot;% of your amount is&quot; &amp;lt;&amp;lt; yourperAmount &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &quot;15% of your amount is&quot; &amp;lt;&amp;lt; myAmount.percent(15) &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;

	if (yourAmount == myAmount)
		cout &amp;lt;&amp;lt; &quot;We have the same amounts.\n&quot;;
	else
		cout &amp;lt;&amp;lt; &quot;One of us is richer.\n&quot;;
	Money ourAmount = yourAmount + myAmount;
	cout &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; &quot; + &quot; &amp;lt;&amp;lt; myAmount
		&amp;lt;&amp;lt; &quot; equals &quot; &amp;lt;&amp;lt; ourAmount &amp;lt;&amp;lt; endl;
	Money diffAmount = yourAmount - myAmount;
	cout &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; &quot; - &quot; &amp;lt;&amp;lt; myAmount
		&amp;lt;&amp;lt; &quot; equals &quot; &amp;lt;&amp;lt; diffAmount &amp;lt;&amp;lt; endl;

	if (ourAmount &amp;gt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;Your amount is greater than or equal to my Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;gt; diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;Your amount is greater than my Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;lt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;My amount is greater than or equal to your Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;lt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;My amount is greater than or equal to your Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	return 0;
}
bool operator ==(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	return ((amount1.dollars == amount2.dollars)
		&amp;amp;&amp;amp; (amount1.cents == amount2.cents));
}
bool operator&amp;lt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return ((amt1.dollars &amp;lt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;lt; amt2.cents)));
}
bool operator&amp;lt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return (((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents == amt2.cents))
		|| (amt1.dollars &amp;lt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;lt; amt2.cents)));
}
bool operator&amp;gt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return ((amt1.dollars &amp;gt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;gt; amt2.cents)));
}
bool operator&amp;gt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return (((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents == amt2.cents))
		|| (amt1.dollars &amp;gt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;gt; amt2.cents)));
}
const Money Money::percent(int percentFigure) const
{
	double percent = 0.01*percentFigure;

	double old = getAmount();
	double newmon = old * percent;
	int dollor = int(newmon);
	int cent = int(newmon*100) % 100;
	Money newmoney(dollor, cent);
	return newmoney;
}

ostream&amp;amp; operator &amp;lt;&amp;lt;(ostream&amp;amp; outputStream, const Money&amp;amp; amount)
{
	int absDollars = abs(amount.dollars);
	int absCents = abs(amount.cents);
	if (amount.dollars &amp;lt; 0 || amount.cents &amp;lt; 0)
		//accounts for dollars == 0 or cents == 0
		outputStream &amp;lt;&amp;lt; &quot;$-&quot;;
	else
		outputStream &amp;lt;&amp;lt; '$';
	outputStream &amp;lt;&amp;lt; absDollars;
	if (absCents &amp;gt;= 10)
		outputStream &amp;lt;&amp;lt; '.' &amp;lt;&amp;lt; absCents;
	else
		outputStream &amp;lt;&amp;lt; '.' &amp;lt;&amp;lt; '0' &amp;lt;&amp;lt; absCents;
	return outputStream;
}
//Uses iostream and cstdlib:
istream&amp;amp; operator &amp;gt;&amp;gt;(istream&amp;amp; inputStream, Money&amp;amp; amount)
{
	char dollarSign;
	inputStream &amp;gt;&amp;gt; dollarSign; //hopefully
	if (dollarSign != '$')
	{
		cout &amp;lt;&amp;lt; &quot;No dollar sign in Money input.\n&quot;;
		exit(1);
	}
	double amountAsDouble;
	inputStream &amp;gt;&amp;gt; amountAsDouble;
	amount.dollars = amount.dollarsPart(amountAsDouble);
	amount.cents = amount.centsPart(amountAsDouble);
	return inputStream;
}
const Money operator +(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	int allCents1 = amount1.cents + amount1.dollars * 100;
	int allCents2 = amount2.cents + amount2.dollars * 100;
	int sumAllCents = allCents1 + allCents2;
	int absAllCents = abs(sumAllCents); //Money can be negative.
	int finalDollars = absAllCents / 100;
	int finalCents = absAllCents % 100;
	if (sumAllCents &amp;lt; 0)
	{
		finalDollars = -finalDollars;
		finalCents = -finalCents;
	}
	return Money(finalDollars, finalCents);
}
//Uses cstdlib:
const Money operator -(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	int allCents1 = amount1.cents + amount1.dollars * 100;
	int allCents2 = amount2.cents + amount2.dollars * 100;
	int diffAllCents = allCents1 - allCents2;
	int absAllCents = abs(diffAllCents);
	int finalDollars = absAllCents / 100;
	int finalCents = absAllCents % 100;
	if (diffAllCents &amp;lt; 0)
	{
		finalDollars = -finalDollars;
		finalCents = -finalCents;
	}
	return Money(finalDollars, finalCents);
}
const Money operator -(const Money&amp;amp; amount)
{
	return Money(-amount.dollars, -amount.cents);
}
Money::Money() : dollars(0), cents(0)
{/*Body intentionally empty.*/
}
Money::Money(double amount)
: dollars(dollarsPart(amount)), cents(centsPart(amount))
{/*Body intentionally empty*/
}
Money::Money(int theDollars)
: dollars(theDollars), cents(0)
{/*Body intentionally empty*/
}
//Uses cstdlib:
Money::Money(int theDollars, int theCents)
{
	if ((theDollars &amp;lt; 0 &amp;amp;&amp;amp; theCents &amp;gt; 0) || (theDollars &amp;gt; 0 &amp;amp;&amp;amp; theCents &amp;lt; 0))
	{
		cout &amp;lt;&amp;lt; &quot;Inconsistent money data.\n&quot;;
		exit(1);
	}
	dollars = theDollars;
	cents = theCents;
}
double Money::getAmount() const
{
	return (dollars + cents*0.01);
}
int Money::getDollars() const
{
	return dollars;
}
int Money::getCents() const
{
	return cents;
}
int Money::dollarsPart(double amount) const
{
	return static_cast&amp;lt;int&amp;gt;(amount);
}
int Money::centsPart(double amount) const
{
	double doubleCents = amount * 100;
	int intCents = (round(fabs(doubleCents))) % 100;//% can misbehave on negatives
	if (amount &amp;lt; 0)
		intCents = -intCents;
	return intCents;
}
int Money::round(double number) const
{
	return static_cast&amp;lt;int&amp;gt;(floor(number + 0.5));
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Gmimg</name></author><category term="C++" /><summary type="html">Operator overloading Friend function, friend class Reference (&amp;amp;)</summary></entry><entry><title type="html">Error detection and correction</title><link href="http://localhost:4000/posts/Error-Detection-and-Correction" rel="alternate" type="text/html" title="Error detection and correction" /><published>2018-10-30T00:00:00+09:00</published><updated>2018-10-30T00:00:00+09:00</updated><id>http://localhost:4000/posts/Error%20Detection%20and%20Correction</id><content type="html" xml:base="http://localhost:4000/posts/Error-Detection-and-Correction">&lt;ul&gt;
  &lt;li&gt;Block coding&lt;/li&gt;
  &lt;li&gt;Cyclic coding&lt;/li&gt;
  &lt;li&gt;Checksum&lt;/li&gt;
  &lt;li&gt;Forward error correction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Error =&amp;gt; bit가 깨짐&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single-bit error&lt;/li&gt;
  &lt;li&gt;Burst error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redundancy&lt;/code&gt; : Error 탐지를 위해 부가적으로 붙이는 bit&lt;/p&gt;

&lt;h1 id=&quot;block-coding&quot;&gt;Block coding&lt;/h1&gt;

&lt;p&gt;Codewords(n) = datawords(k) + redundant(r)&lt;/p&gt;

&lt;p&gt;2^n - 2^k = codeword가 남아서 invalid 코드를 판단한다.&lt;/p&gt;

&lt;p&gt;Hamming Distance : 두 bits를 exclusive or해서 1의 갯수를 샌것 (즉, 두 words의 거리)&lt;/p&gt;

&lt;h2 id=&quot;linear-block-codes&quot;&gt;Linear Block Codes&lt;/h2&gt;

&lt;p&gt;각 비트를 exclusive or 해서 redundancy를 붙여줌.&lt;/p&gt;

&lt;p&gt;ex) 00 -&amp;gt; 000, 10 -&amp;gt; 101, 01 -&amp;gt; 011, 11 -&amp;gt; 110&lt;/p&gt;

&lt;p&gt;Minimum Hanning distance is 2.&lt;/p&gt;

&lt;h2 id=&quot;parity-check-code&quot;&gt;Parity-check code&lt;/h2&gt;

&lt;p&gt;하나의 linear bock code&lt;/p&gt;

&lt;p&gt;detect an odd number of errors&lt;/p&gt;

&lt;h1 id=&quot;cyclic-coding&quot;&gt;Cyclic coding&lt;/h1&gt;

&lt;h2 id=&quot;crc&quot;&gt;CRC&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/CRC.JPG&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/CRC2.JPG&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤값을 나눠서 남은 나머지를 붙여서 보냄&lt;/p&gt;

&lt;p&gt;수신측과 송신측은 어떤 값을 나눴는지 미리 정해야함.&lt;/p&gt;

&lt;p&gt;수신측에서 받은 codeword를 그수로 나누면 나누어 떨어져야한다.&lt;/p&gt;

&lt;h3 id=&quot;polynomial&quot;&gt;Polynomial&lt;/h3&gt;

&lt;p&gt;binary -&amp;gt; 다항식으로 차수를 적용&lt;/p&gt;

&lt;p&gt;Generator 생성에 유리&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**dataword를 주고 CRC값 찾기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;checksum&quot;&gt;Checksum&lt;/h1&gt;

&lt;p&gt;블럭을 일정한 bit인 여러 유닛으로 나누어 다 더한값을 Redundancy로 사용&lt;/p&gt;

&lt;p&gt;유닛의 범위를 넘어가면 넘어간 범위를 그냥 더해줌&lt;/p&gt;

&lt;p&gt;**풀어볼것&lt;/p&gt;

&lt;h1 id=&quot;chunk-interleaving&quot;&gt;Chunk Interleaving&lt;/h1&gt;

&lt;p&gt;패킷별로 보내는게 아니라 다른 유닛으로 보내준다 -&amp;gt; 미디어전송에 유리(손실돼도 큰 지장 없음)&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Error Detection" /><category term="Error Correction" /><summary type="html">Block coding Cyclic coding Checksum Forward error correction Error =&amp;gt; bit가 깨짐</summary></entry><entry><title type="html">Intruduction to data Link layer</title><link href="http://localhost:4000/posts/Intruduction-to-Data-LInk-layer" rel="alternate" type="text/html" title="Intruduction to data Link layer" /><published>2018-10-28T00:00:00+09:00</published><updated>2018-10-28T00:00:00+09:00</updated><id>http://localhost:4000/posts/Intruduction%20to%20Data-LInk%20layer</id><content type="html" xml:base="http://localhost:4000/posts/Intruduction-to-Data-LInk-layer">&lt;p&gt;links and nodes&lt;/p&gt;

&lt;h1 id=&quot;data-link-layer&quot;&gt;Data-link layer&lt;/h1&gt;

&lt;p&gt;Communication at the data-link layer is node-to-node.&lt;/p&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;

&lt;p&gt;The datalink layer provides &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; to the network layer. It also receives services from the physical layer.&lt;/p&gt;

&lt;p&gt;데이터링크층은 데이터그램을 다음노드로 전달한다.&lt;/p&gt;

&lt;p&gt;Sending node의 Data-link layer는 네트워크로부터 받은 데이터그램을 encapsulate 하는게 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Framing&lt;/p&gt;

    &lt;p&gt;데이터링크 층에서 첫 번째로 제공되는 서비스는 framing이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flow control&lt;/p&gt;

    &lt;p&gt;만약 소비되는 프레임속도보다 제공되는 프레임의 속도가 높으면 멈추거나 속도를 늦추라고 요구한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Error control&lt;/li&gt;
  &lt;li&gt;congestion control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;link&quot;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;point-to-point link&lt;/li&gt;
  &lt;li&gt;Broadcast link&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sublayers&quot;&gt;Sublayers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Data link control (DLC) sublayer&lt;/li&gt;
  &lt;li&gt;Media access control (MAC) sublayer
Data-link layer of a broadcast link&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;link-layer-addressing&quot;&gt;Link-layer addressing&lt;/h1&gt;

&lt;p&gt;Mac address(physical aaress)(link address)는 장치를 지날때마다 바뀌지만 IP address는 목적지에 도착할 때 까지 바뀌지 않는다. 즉 맥주소는 최종목적지가 아닌 바로 다음 목적지를 가리킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicast address&lt;/li&gt;
  &lt;li&gt;Multicast address&lt;/li&gt;
  &lt;li&gt;Broadcast address&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;address-resolution-protocol-arp&quot;&gt;Address Resolution Protocol (ARP)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP2.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP3.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example1.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example2.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example3.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example4.JPG&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Data-link layer" /><summary type="html">links and nodes</summary></entry><entry><title type="html">C++ Structure and Classs</title><link href="http://localhost:4000/posts/C++-Structure-and-Classs" rel="alternate" type="text/html" title="C++ Structure and Classs" /><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Structure%20and%20Classs</id><content type="html" xml:base="http://localhost:4000/posts/C++-Structure-and-Classs">&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;Array와 비슷하지만 different types 의 값의 모음이다.&lt;/p&gt;

&lt;p&gt;먼저 전역적(global)으로 정의해야한다&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Weather1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WeatherData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;32.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;classes&quot;&gt;Classes&lt;/h1&gt;

&lt;p&gt;Structure와 비슷하지만 Member Function이 추가됨&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dot operator는 member of particular object를 지정할때 사용, Scope resolution operator(::)는 class의 function 지정할때 사용.&lt;/p&gt;

&lt;p&gt;Class is full-fledged type&lt;/p&gt;

&lt;p&gt;Can have variables of a class type
-&amp;gt; simply call them “object”&lt;/p&gt;

&lt;p&gt;OOP의 원리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inheritance (상속)&lt;/li&gt;
  &lt;li&gt;Abstract (추상화)
무엇을 하는지와, 어떻게 수행하는지 구별.&lt;/li&gt;
  &lt;li&gt;Encapsulation (캡슐화)
내부표현을 사용자가 알 수 없다.(Information Hiding)&lt;/li&gt;
  &lt;li&gt;Polymorphism(다형성)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><category term="C++" /><category term="Structure" /><category term="Class" /><summary type="html">Structure</summary></entry></feed>