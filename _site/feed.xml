<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2018-11-08T01:01:52+09:00</updated><id>http://localhost:4000/</id><title type="html">GMIMG</title><subtitle>Mechagrammer</subtitle><author><name>Jimin Hwang</name></author><entry><title type="html">Data link control</title><link href="http://localhost:4000/posts/Data-Link-Control" rel="alternate" type="text/html" title="Data link control" /><published>2018-11-06T00:00:00+09:00</published><updated>2018-11-06T00:00:00+09:00</updated><id>http://localhost:4000/posts/Data%20Link%20Control</id><content type="html" xml:base="http://localhost:4000/posts/Data-Link-Control">&lt;h1 id=&quot;data-link-control&quot;&gt;Data Link Control&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;general serviece DLC Sublayer&lt;/li&gt;
  &lt;li&gt;Data link protocols&lt;/li&gt;
  &lt;li&gt;HDLC&lt;/li&gt;
  &lt;li&gt;PPP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## 
|—|
|DLC|
|—|
|MAC|
|—|
|PHY|
|—|&lt;/p&gt;

&lt;p&gt;PHY-&amp;gt; 1계층 -&amp;gt; bit synchronization&lt;br /&gt;
DLC,MAC -&amp;gt; 2계층 -&amp;gt; pack bits into ‘frames’&lt;/p&gt;

&lt;p&gt;frames 에는 sender와 recevier의 addresses가 정의된다. Fixed-size framing과 Variable-size framing으로 나뉜다.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h3 id=&quot;charater-orientedbyte-oriented-framing&quot;&gt;Charater-Oriented(byte-oriented) Framing&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flag&lt;/td&gt;
      &lt;td&gt;Header&lt;/td&gt;
      &lt;td&gt;DATA from upper layer&lt;/td&gt;
      &lt;td&gt;Trailer&lt;/td&gt;
      &lt;td&gt;Flag&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;byte단위로 보내준다. 8-bit Charater로 data를 보낸다. Header는 8bits의 배수이다.
내용에 Flag와 같은 패턴의 bit가 들어갔을 때 ESC(special byte)를 해당 bit앞에 붙여줌, ESC가 들어가도 ESC를 붙여준다. 
Trailer에는 CRC가 들어간다.&lt;/p&gt;

&lt;h3 id=&quot;bit-oriented-framing&quot;&gt;Bit-Oriented Framing&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flag&lt;/td&gt;
      &lt;td&gt;Header&lt;/td&gt;
      &lt;td&gt;DATA from upper layer&lt;/td&gt;
      &lt;td&gt;Trailer&lt;/td&gt;
      &lt;td&gt;Flag&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Data에 Flag와 같은 패턴의 bit가 들어갔을 때 extra bits를 붙여준다.&lt;/p&gt;

&lt;p&gt;‘Flow Control’&lt;/p&gt;

&lt;p&gt;Balancing between proudction and consumption rates. Feedback from the receiving node to the sending node to stop or slow down pushing frames.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Buffers가 발생&lt;/p&gt;

&lt;p&gt;‘Error Control’&lt;/p&gt;

&lt;p&gt;CRC is added to the frame by the sender and checked by the receiver.&lt;/p&gt;

&lt;p&gt;보통 수신자에서 송신자로 보내는 Acknowledgment(ACK)로 둘을 한꺼번에 하게된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Connection-Oriented Protocol&lt;/p&gt;

    &lt;p&gt;계속 Data를 주고받으며 연결이 되어있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connectionless Protocol&lt;/p&gt;

    &lt;p&gt;Wifi같이 필요할 때에 Data를 주고받으며 연결이 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-link-layer-protocols&quot;&gt;Data-link layer protocols&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Simple&lt;/li&gt;
  &lt;li&gt;Stop-and-Wait&lt;/li&gt;
  &lt;li&gt;Go-Back-N&lt;/li&gt;
  &lt;li&gt;Selective-Report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protocol을 표현하는 방법은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FSM (Finite state machine)&lt;/p&gt;

    &lt;p&gt;FSM은 오직 ready state만 가지고있다. sending machine은 request가 오기전까지 ready state에 남아있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MSC (Message sequence chart)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stop-and-wait&quot;&gt;Stop-and-Wait&lt;/h3&gt;

&lt;p&gt;Using both flow and error control. Sender sends one frame at a time and waits for an acknowledgment before sending the next one.&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="None" /><summary type="html">Data Link Control</summary></entry><entry><title type="html">C++ operator overloading</title><link href="http://localhost:4000/posts/C++-Operator-Overloading" rel="alternate" type="text/html" title="C++ operator overloading" /><published>2018-10-30T00:00:00+09:00</published><updated>2018-10-30T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Operator%20Overloading</id><content type="html" xml:base="http://localhost:4000/posts/C++-Operator-Overloading">&lt;ol&gt;
  &lt;li&gt;Operator overloading&lt;/li&gt;
  &lt;li&gt;Friend function, friend class&lt;/li&gt;
  &lt;li&gt;Reference (&amp;amp;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;operator-overloading&quot;&gt;Operator overloading&lt;/h1&gt;

&lt;p&gt;+, -, %, ++, –, », «, and []. Operator 는 사실 function과 같다. +(x,7) 에서 +는 함수 이름, x와 7은 arguments이고 Function “+”는 arguments의 sum을 return한다. 그리고 이는 x + 7 이라는 syntax로 호출 할 수 있다.&lt;/p&gt;

&lt;p&gt;+, -, = , %, ==, /, * 과 같은 연산자가 이미 C++에 built-in 되어있으며 우리는 이를 overload 할 수 있다.[Parameter and overloading 참조] (단, 당연히 유사한 기능을 할 때 overload하는게 좋다.)&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//example declaration
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;constant를 사용하는 이유 : 클래스의 객체에서 기본 할당 연산자는 두 객체를 같은 객체로 만들지 않고 하나의 객체에서 다른 객체로만 구성원 변수의 값을 복사합니다. Constant functions not allowed to alter class member data. Constant objects can ONLY call constant member functions. Any member function that will NOT modify data should be made const. Use keyword const after function declaration and heading.&lt;/p&gt;

&lt;p&gt;unary operation(단항 연산자) : y= -x, x++ 같은 항이 하나인 연산을 말한다.&lt;/p&gt;

&lt;h2 id=&quot;friend-function-of-a-class&quot;&gt;Friend function of a class&lt;/h2&gt;

&lt;p&gt;멤버 함수가 아니다. private 멤버에 직접적인 접근을 가진다. overhead 없어서 더욱 효율적이다. 모든 함수에 사용할 수 있고, Operator overload에 주로 사용한다. Avoids need to call accessor/mutator member functions&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/C++/Friend_function.jpg&quot; alt=&quot;Friend function&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references참조&quot;&gt;References(참조)&lt;/h2&gt;

&lt;p&gt;변수에 별칭을 지정합니다. Name of a storage location. Similar to “pointer”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//class, operator overloading 예제
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;cmath&amp;gt;
using namespace std;
//Class for amounts of money in U.S. currency.
class Money
{
public:
	Money();
	Money(double amount);
	Money(int theDollars, int theCents);
	Money(int theDollars);
	double getAmount() const;
	int getDollars() const;
	int getCents() const;

	friend bool operator&amp;lt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;lt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;gt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	friend bool operator&amp;gt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2);
	const Money percent(int percentFigure) const;
	//Returns percentFigure percent of Money.
	//Example: If percentFigure is 10, a Money object is returned that
	//represents 0.1 of the amount of money of the calling object
	//If purse is a Money object representing $100.20, purse.percent(10)
	//is a Money object representing $10.02.

	friend const Money operator +(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend const Money operator -(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend bool operator ==(const Money&amp;amp; amount1, const Money&amp;amp; amount2);
	friend const Money operator -(const Money&amp;amp; amount);
	friend ostream&amp;amp; operator &amp;lt;&amp;lt;(ostream&amp;amp; outputStream, const Money&amp;amp; amount);
	friend istream&amp;amp; operator &amp;gt;&amp;gt;(istream&amp;amp; inputStream, Money&amp;amp; amount);
private:
	int dollars; //A negative amount is represented as negative dollars and
	int cents; //negative cents. Negative $4.50 is represented as -4 and -50
	int dollarsPart(double amount) const;
	int centsPart(double amount) const;
	int round(double number) const;
};
int main()
{
	int percen;
	Money yourAmount, myAmount(10, 9);
	cout &amp;lt;&amp;lt; &quot;Enter an amount of money: &quot;;
	cin &amp;gt;&amp;gt; yourAmount;
	cout &amp;lt;&amp;lt; &quot;a percent you wish to take of your amount\n&quot;;
	cin &amp;gt;&amp;gt; percen;

	Money yourperAmount = yourAmount.percent(percen);
	cout &amp;lt;&amp;lt; &quot;Your amount is &quot; &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &quot;My amount is &quot; &amp;lt;&amp;lt; myAmount &amp;lt;&amp;lt; endl;

	cout &amp;lt;&amp;lt; percen &amp;lt;&amp;lt; &quot;% of your amount is&quot; &amp;lt;&amp;lt; yourperAmount &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &quot;15% of your amount is&quot; &amp;lt;&amp;lt; myAmount.percent(15) &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;

	if (yourAmount == myAmount)
		cout &amp;lt;&amp;lt; &quot;We have the same amounts.\n&quot;;
	else
		cout &amp;lt;&amp;lt; &quot;One of us is richer.\n&quot;;
	Money ourAmount = yourAmount + myAmount;
	cout &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; &quot; + &quot; &amp;lt;&amp;lt; myAmount
		&amp;lt;&amp;lt; &quot; equals &quot; &amp;lt;&amp;lt; ourAmount &amp;lt;&amp;lt; endl;
	Money diffAmount = yourAmount - myAmount;
	cout &amp;lt;&amp;lt; yourAmount &amp;lt;&amp;lt; &quot; - &quot; &amp;lt;&amp;lt; myAmount
		&amp;lt;&amp;lt; &quot; equals &quot; &amp;lt;&amp;lt; diffAmount &amp;lt;&amp;lt; endl;

	if (ourAmount &amp;gt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;Your amount is greater than or equal to my Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;gt; diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;Your amount is greater than my Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;lt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;My amount is greater than or equal to your Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	if (ourAmount &amp;lt;= diffAmount)
	{
		cout &amp;lt;&amp;lt; &quot;My amount is greater than or equal to your Amount&quot; &amp;lt;&amp;lt; endl;
		cout &amp;lt;&amp;lt; &quot;The sum of our Amounts is greater than the difference.&quot; &amp;lt;&amp;lt; endl;
	}
	return 0;
}
bool operator ==(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	return ((amount1.dollars == amount2.dollars)
		&amp;amp;&amp;amp; (amount1.cents == amount2.cents));
}
bool operator&amp;lt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return ((amt1.dollars &amp;lt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;lt; amt2.cents)));
}
bool operator&amp;lt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return (((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents == amt2.cents))
		|| (amt1.dollars &amp;lt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;lt; amt2.cents)));
}
bool operator&amp;gt;(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return ((amt1.dollars &amp;gt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;gt; amt2.cents)));
}
bool operator&amp;gt;=(const Money&amp;amp; amt1, const Money&amp;amp; amt2)
{
	return (((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents == amt2.cents))
		|| (amt1.dollars &amp;gt; amt2.dollars)
		|| ((amt1.dollars == amt2.dollars) &amp;amp;&amp;amp; (amt1.cents &amp;gt; amt2.cents)));
}
const Money Money::percent(int percentFigure) const
{
	double percent = 0.01*percentFigure;

	double old = getAmount();
	double newmon = old * percent;
	int dollor = int(newmon);
	int cent = int(newmon*100) % 100;
	Money newmoney(dollor, cent);
	return newmoney;
}

ostream&amp;amp; operator &amp;lt;&amp;lt;(ostream&amp;amp; outputStream, const Money&amp;amp; amount)
{
	int absDollars = abs(amount.dollars);
	int absCents = abs(amount.cents);
	if (amount.dollars &amp;lt; 0 || amount.cents &amp;lt; 0)
		//accounts for dollars == 0 or cents == 0
		outputStream &amp;lt;&amp;lt; &quot;$-&quot;;
	else
		outputStream &amp;lt;&amp;lt; '$';
	outputStream &amp;lt;&amp;lt; absDollars;
	if (absCents &amp;gt;= 10)
		outputStream &amp;lt;&amp;lt; '.' &amp;lt;&amp;lt; absCents;
	else
		outputStream &amp;lt;&amp;lt; '.' &amp;lt;&amp;lt; '0' &amp;lt;&amp;lt; absCents;
	return outputStream;
}
//Uses iostream and cstdlib:
istream&amp;amp; operator &amp;gt;&amp;gt;(istream&amp;amp; inputStream, Money&amp;amp; amount)
{
	char dollarSign;
	inputStream &amp;gt;&amp;gt; dollarSign; //hopefully
	if (dollarSign != '$')
	{
		cout &amp;lt;&amp;lt; &quot;No dollar sign in Money input.\n&quot;;
		exit(1);
	}
	double amountAsDouble;
	inputStream &amp;gt;&amp;gt; amountAsDouble;
	amount.dollars = amount.dollarsPart(amountAsDouble);
	amount.cents = amount.centsPart(amountAsDouble);
	return inputStream;
}
const Money operator +(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	int allCents1 = amount1.cents + amount1.dollars * 100;
	int allCents2 = amount2.cents + amount2.dollars * 100;
	int sumAllCents = allCents1 + allCents2;
	int absAllCents = abs(sumAllCents); //Money can be negative.
	int finalDollars = absAllCents / 100;
	int finalCents = absAllCents % 100;
	if (sumAllCents &amp;lt; 0)
	{
		finalDollars = -finalDollars;
		finalCents = -finalCents;
	}
	return Money(finalDollars, finalCents);
}
//Uses cstdlib:
const Money operator -(const Money&amp;amp; amount1, const Money&amp;amp; amount2)
{
	int allCents1 = amount1.cents + amount1.dollars * 100;
	int allCents2 = amount2.cents + amount2.dollars * 100;
	int diffAllCents = allCents1 - allCents2;
	int absAllCents = abs(diffAllCents);
	int finalDollars = absAllCents / 100;
	int finalCents = absAllCents % 100;
	if (diffAllCents &amp;lt; 0)
	{
		finalDollars = -finalDollars;
		finalCents = -finalCents;
	}
	return Money(finalDollars, finalCents);
}
const Money operator -(const Money&amp;amp; amount)
{
	return Money(-amount.dollars, -amount.cents);
}
Money::Money() : dollars(0), cents(0)
{/*Body intentionally empty.*/
}
Money::Money(double amount)
: dollars(dollarsPart(amount)), cents(centsPart(amount))
{/*Body intentionally empty*/
}
Money::Money(int theDollars)
: dollars(theDollars), cents(0)
{/*Body intentionally empty*/
}
//Uses cstdlib:
Money::Money(int theDollars, int theCents)
{
	if ((theDollars &amp;lt; 0 &amp;amp;&amp;amp; theCents &amp;gt; 0) || (theDollars &amp;gt; 0 &amp;amp;&amp;amp; theCents &amp;lt; 0))
	{
		cout &amp;lt;&amp;lt; &quot;Inconsistent money data.\n&quot;;
		exit(1);
	}
	dollars = theDollars;
	cents = theCents;
}
double Money::getAmount() const
{
	return (dollars + cents*0.01);
}
int Money::getDollars() const
{
	return dollars;
}
int Money::getCents() const
{
	return cents;
}
int Money::dollarsPart(double amount) const
{
	return static_cast&amp;lt;int&amp;gt;(amount);
}
int Money::centsPart(double amount) const
{
	double doubleCents = amount * 100;
	int intCents = (round(fabs(doubleCents))) % 100;//% can misbehave on negatives
	if (amount &amp;lt; 0)
		intCents = -intCents;
	return intCents;
}
int Money::round(double number) const
{
	return static_cast&amp;lt;int&amp;gt;(floor(number + 0.5));
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Gmimg</name></author><category term="C++" /><summary type="html">Operator overloading Friend function, friend class Reference (&amp;amp;)</summary></entry><entry><title type="html">Error detection and correction</title><link href="http://localhost:4000/posts/Error-Detection-and-Correction" rel="alternate" type="text/html" title="Error detection and correction" /><published>2018-10-30T00:00:00+09:00</published><updated>2018-10-30T00:00:00+09:00</updated><id>http://localhost:4000/posts/Error%20Detection%20and%20Correction</id><content type="html" xml:base="http://localhost:4000/posts/Error-Detection-and-Correction">&lt;ul&gt;
  &lt;li&gt;Block coding&lt;/li&gt;
  &lt;li&gt;Cyclic coding&lt;/li&gt;
  &lt;li&gt;Checksum&lt;/li&gt;
  &lt;li&gt;Forward error correction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Error =&amp;gt; bit가 깨짐&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single-bit error&lt;/li&gt;
  &lt;li&gt;Burst error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Redundancy&lt;/code&gt; : Error 탐지를 위해 부가적으로 붙이는 bit&lt;/p&gt;

&lt;h1 id=&quot;block-coding&quot;&gt;Block coding&lt;/h1&gt;

&lt;p&gt;Codewords(n) = datawords(k) + redundant(r)&lt;/p&gt;

&lt;p&gt;2^n - 2^k = codeword가 남아서 invalid 코드를 판단한다.&lt;/p&gt;

&lt;p&gt;Hamming Distance : 두 bits를 exclusive or해서 1의 갯수를 샌것 (즉, 두 words의 거리)&lt;/p&gt;

&lt;h2 id=&quot;linear-block-codes&quot;&gt;Linear Block Codes&lt;/h2&gt;

&lt;p&gt;각 비트를 exclusive or 해서 redundancy를 붙여줌.&lt;/p&gt;

&lt;p&gt;ex) 00 -&amp;gt; 000, 10 -&amp;gt; 101, 01 -&amp;gt; 011, 11 -&amp;gt; 110&lt;/p&gt;

&lt;p&gt;Minimum Hanning distance is 2.&lt;/p&gt;

&lt;h2 id=&quot;parity-check-code&quot;&gt;Parity-check code&lt;/h2&gt;

&lt;p&gt;하나의 linear bock code&lt;/p&gt;

&lt;p&gt;detect an odd number of errors&lt;/p&gt;

&lt;h1 id=&quot;cyclic-coding&quot;&gt;Cyclic coding&lt;/h1&gt;

&lt;h2 id=&quot;crc&quot;&gt;CRC&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/CRC.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/CRC2.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤값을 나눠서 남은 나머지를 붙여서 보냄&lt;/p&gt;

&lt;p&gt;수신측과 송신측은 어떤 값을 나눴는지 미리 정해야함.&lt;/p&gt;

&lt;p&gt;수신측에서 받은 codeword를 그수로 나누면 나누어 떨어져야한다.&lt;/p&gt;

&lt;h3 id=&quot;polynomial&quot;&gt;Polynomial&lt;/h3&gt;

&lt;p&gt;binary -&amp;gt; 다항식으로 차수를 적용&lt;/p&gt;

&lt;p&gt;Generator 생성에 유리&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**dataword를 주고 CRC값 찾기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;checksum&quot;&gt;Checksum&lt;/h1&gt;

&lt;p&gt;블럭을 일정한 bit인 여러 유닛으로 나누어 다 더한값을 Redundancy로 사용&lt;/p&gt;

&lt;p&gt;유닛의 범위를 넘어가면 넘어간 범위를 그냥 더해줌&lt;/p&gt;

&lt;p&gt;**풀어볼것&lt;/p&gt;

&lt;h1 id=&quot;chunk-interleaving&quot;&gt;Chunk Interleaving&lt;/h1&gt;

&lt;p&gt;패킷별로 보내는게 아니라 다른 유닛으로 보내준다 -&amp;gt; 미디어전송에 유리(손실돼도 큰 지장 없음)&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Error Detection" /><category term="Error Correction" /><summary type="html">Block coding Cyclic coding Checksum Forward error correction Error =&amp;gt; bit가 깨짐</summary></entry><entry><title type="html">Intruduction to data Link layer</title><link href="http://localhost:4000/posts/Intruduction-to-Data-LInk-layer" rel="alternate" type="text/html" title="Intruduction to data Link layer" /><published>2018-10-28T00:00:00+09:00</published><updated>2018-10-28T00:00:00+09:00</updated><id>http://localhost:4000/posts/Intruduction%20to%20Data-LInk%20layer</id><content type="html" xml:base="http://localhost:4000/posts/Intruduction-to-Data-LInk-layer">&lt;p&gt;links and nodes&lt;/p&gt;

&lt;h1 id=&quot;data-link-layer&quot;&gt;Data-link layer&lt;/h1&gt;

&lt;p&gt;Communication at the data-link layer is node-to-node.&lt;/p&gt;

&lt;h2 id=&quot;services&quot;&gt;Services&lt;/h2&gt;

&lt;p&gt;The datalink layer provides &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; to the network layer. It also receives services from the physical layer.&lt;/p&gt;

&lt;p&gt;데이터링크층은 데이터그램을 다음노드로 전달한다.&lt;/p&gt;

&lt;p&gt;Sending node의 Data-link layer는 네트워크로부터 받은 데이터그램을 encapsulate 하는게 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Framing&lt;/p&gt;

    &lt;p&gt;데이터링크 층에서 첫 번째로 제공되는 서비스는 framing이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flow control&lt;/p&gt;

    &lt;p&gt;만약 소비되는 프레임속도보다 제공되는 프레임의 속도가 높으면 멈추거나 속도를 늦추라고 요구한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Error control&lt;/li&gt;
  &lt;li&gt;congestion control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;link&quot;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;point-to-point link&lt;/li&gt;
  &lt;li&gt;Broadcast link&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sublayers&quot;&gt;Sublayers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Data link control (DLC) sublayer&lt;/li&gt;
  &lt;li&gt;Media access control (MAC) sublayer
Data-link layer of a broadcast link&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;link-layer-addressing&quot;&gt;Link-layer addressing&lt;/h1&gt;

&lt;p&gt;Mac address(physical aaress)(link address)는 장치를 지날때마다 바뀌지만 IP address는 목적지에 도착할 때 까지 바뀌지 않는다. 즉 맥주소는 최종목적지가 아닌 바로 다음 목적지를 가리킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicast address&lt;/li&gt;
  &lt;li&gt;Multicast address&lt;/li&gt;
  &lt;li&gt;Broadcast address&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;address-resolution-protocol-arp&quot;&gt;Address Resolution Protocol (ARP)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP2.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP3.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example1.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example2.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example3.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ARP_example4.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Data-link layer" /><summary type="html">links and nodes</summary></entry><entry><title type="html">C++ Structure and Classs</title><link href="http://localhost:4000/posts/C++-Structure-and-Classs" rel="alternate" type="text/html" title="C++ Structure and Classs" /><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Structure%20and%20Classs</id><content type="html" xml:base="http://localhost:4000/posts/C++-Structure-and-Classs">&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;Array와 비슷하지만 different types 의 값의 모음이다.&lt;/p&gt;

&lt;p&gt;먼저 전역적(global)으로 정의해야한다&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Weather1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WeatherData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;32.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;classes&quot;&gt;Classes&lt;/h1&gt;

&lt;p&gt;Structure와 비슷하지만 Member Function이 추가됨&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dot operator는 member of particular object를 지정할때 사용, Scope resolution operator(::)는 class의 function 지정할때 사용.&lt;/p&gt;

&lt;p&gt;Class is full-fledged type&lt;/p&gt;

&lt;p&gt;Can have variables of a class type
-&amp;gt; simply call them “object”&lt;/p&gt;

&lt;p&gt;OOP의 원리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Inheritance (상속)&lt;/li&gt;
  &lt;li&gt;Abstract (추상화)
무엇을 하는지와, 어떻게 수행하는지 구별.&lt;/li&gt;
  &lt;li&gt;Encapsulation (캡슐화)
내부표현을 사용자가 알 수 없다.(Information Hiding)&lt;/li&gt;
  &lt;li&gt;Polymorphism(다형성)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><category term="C++" /><category term="Structure" /><category term="Class" /><summary type="html">Structure</summary></entry><entry><title type="html">C++ Constructor and Other tools</title><link href="http://localhost:4000/posts/C++-Constructor-and-Other-tools" rel="alternate" type="text/html" title="C++ Constructor and Other tools" /><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><id>http://localhost:4000/posts/C++%20Constructor%20and%20Other%20tools</id><content type="html" xml:base="http://localhost:4000/posts/C++-Constructor-and-Other-tools">&lt;h1 id=&quot;constructors&quot;&gt;Constructors&lt;/h1&gt;

&lt;p&gt;Initialization of objects&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize some or all member variables&lt;/li&gt;
  &lt;li&gt;Same name as class itself&lt;/li&gt;
  &lt;li&gt;Declaration has no return-type(not even void)&lt;/li&gt;
  &lt;li&gt;In public section&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DayOfYear&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//Constructor initializes month and day 
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayofYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;date1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;date3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;testDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//available like next
//DayOfYear :: DayOfYear (int monthValue , int dayValue )
//            : month(monthValue), day(dayValue)
//{
//  testDate();
//}
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Illegal month value! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Illegal day value! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter the month as a number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enter the day of month: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Illegal date! Program aborted. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;constant-parameter&quot;&gt;Constant parameter&lt;/h1&gt;

&lt;p&gt;place keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; before type&lt;/p&gt;

&lt;p&gt;“read-only”&lt;/p&gt;

&lt;p&gt;const + call by reference 와 call by value의 차이
&lt;a href=&quot;https://hashcode.co.kr/questions/2212/c-const-reference-%EB%B3%80%EC%88%98%EC%99%80-%EA%B7%B8%EB%83%A5-%EB%B3%80%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;참고&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;statics&quot;&gt;statics&lt;/h1&gt;

&lt;h1 id=&quot;vector&quot;&gt;Vector&lt;/h1&gt;

&lt;p&gt;arrays that grow and shrink&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="C++" /><category term="Constructor" /><summary type="html">Constructors</summary></entry><entry><title type="html">Switching</title><link href="http://localhost:4000/posts/Switching" rel="alternate" type="text/html" title="Switching" /><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><id>http://localhost:4000/posts/Switching</id><content type="html" xml:base="http://localhost:4000/posts/Switching">&lt;h1 id=&quot;switching&quot;&gt;Switching&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Circuit switching&lt;/li&gt;
  &lt;li&gt;Packet switching
    &lt;ul&gt;
      &lt;li&gt;Virtual-circuit approach&lt;/li&gt;
      &lt;li&gt;Datagram approach&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Message switching&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;circuit-switched-network&quot;&gt;Circuit-switched network&lt;/h2&gt;

&lt;p&gt;connected by physical links&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup phase
    &lt;ul&gt;
      &lt;li&gt;dedicated circuit&lt;/li&gt;
      &lt;li&gt;Resources: such as channel (bandwidth in FDM and time slots in TDM), switch buffers, switch processing time, and switch input/output ports 할당&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data-transfer phase
    &lt;ul&gt;
      &lt;li&gt;No addressing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Teardown phase(disconnect)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;장점 : 연결되어 있을때 Delay 가없음.&lt;br /&gt;
단점 : 효율적이지 않음. 빈데이터가 있어도 연결돼있음.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Circuit_delay.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;packet-switched-network&quot;&gt;Packet-switched network&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;No resource allocation&lt;/li&gt;
  &lt;li&gt;No reserved bandwidth&lt;/li&gt;
  &lt;li&gt;No scheduled processing time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lack of reservation may create delay&lt;/p&gt;

&lt;h3 id=&quot;datagram-network&quot;&gt;Datagram network&lt;/h3&gt;

&lt;p&gt;서로 다른 길로 들어와서 TCP가 재정렬함.&lt;/p&gt;

&lt;p&gt;No setup or teardown phases.&lt;/p&gt;

&lt;p&gt;Routing Table 생성&lt;/p&gt;

&lt;p&gt;Every packet in a datagram network carries a header that contains the destination address of the packet.&lt;/p&gt;

&lt;p&gt;virtual-circuit network보단 delay가 적다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Datagram_delay.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;virtual-circuit-networks&quot;&gt;Virtual-Circuit Networks&lt;/h3&gt;

&lt;p&gt;Setup and teardown phases + Data transfer phase&lt;/p&gt;

&lt;p&gt;Same path&lt;/p&gt;

&lt;p&gt;Virtual-Circuit Identifier (VCI)&lt;/p&gt;

&lt;p&gt;All switches need to have a table entry for this virtual circuit.&lt;br /&gt;
Each switch changes the VCI and routes the frame.&lt;/p&gt;

&lt;p&gt;Setup request frame 이 Routing table로 따라 보내면 Acknowledgment Frame이 돌아오면서 VCI를 설정해줘서 switching table이 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Virtual_circuit_delay.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="switching" /><summary type="html">Switching</summary></entry><entry><title type="html">Transmission media</title><link href="http://localhost:4000/posts/Transmission-Media" rel="alternate" type="text/html" title="Transmission media" /><published>2018-10-11T00:00:00+09:00</published><updated>2018-10-11T00:00:00+09:00</updated><id>http://localhost:4000/posts/Transmission%20Media</id><content type="html" xml:base="http://localhost:4000/posts/Transmission-Media">&lt;h1 id=&quot;transmission-media&quot;&gt;Transmission media&lt;/h1&gt;

&lt;p&gt;located below the physical layer and are directly controlled by the physical layer.&lt;/p&gt;

&lt;p&gt;Carry information from a source to a destination.&lt;/p&gt;

&lt;p&gt;Free space, metallic cable, or fiber-optic cable&lt;/p&gt;

&lt;h2 id=&quot;guided-media&quot;&gt;Guided media&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Twisted-pair cables&lt;/li&gt;
  &lt;li&gt;Coaxial cables&lt;/li&gt;
  &lt;li&gt;(Fiber-optic cable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provide a conduit(도관) from one device to another.&lt;/p&gt;

&lt;p&gt;Signal traveling directed and contained by the physical limits of medium.&lt;/p&gt;

&lt;h3 id=&quot;twisted-pair-cable&quot;&gt;Twisted-Pair Cable&lt;/h3&gt;

&lt;p&gt;Voice and data communications&lt;/p&gt;

&lt;p&gt;One of the sires is used to carry signals to the receiver&lt;/p&gt;

&lt;p&gt;The other is used only as a ground reference.&lt;/p&gt;

&lt;p&gt;crosstalk(noise 발생)&lt;/p&gt;

&lt;p&gt;꼬아줌으로서 balance 유지 -&amp;gt; 외부영향을 두선 모두 동등하게 받음&lt;/p&gt;

&lt;p&gt;noise가 cancle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unshielded twisted-pair (UTP)&lt;/li&gt;
  &lt;li&gt;Shielded twisted-pair(STP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;coaxial-cable&quot;&gt;Coaxial cable&lt;/h3&gt;

&lt;p&gt;Carries signal of higher frequency ranges&lt;/p&gt;

&lt;p&gt;Cable TV networks and traditional Ethernet LANs&lt;/p&gt;

&lt;h3 id=&quot;fiber-optic-cables&quot;&gt;Fiber-optic cables&lt;/h3&gt;

&lt;p&gt;Bacbone networks, cable TV networks, and Fast Ethernet networks&lt;/p&gt;

&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Higher bandwidth&lt;/li&gt;
  &lt;li&gt;Less signal attenuation&lt;/li&gt;
  &lt;li&gt;light weight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;installation and maintenance&lt;/li&gt;
  &lt;li&gt;cost&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unguided-media&quot;&gt;unguided media&lt;/h2&gt;

&lt;p&gt;Transport electromagnetic waves without the use of a physical conductor(free space)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Radio waves&lt;br /&gt;
  Multicast communications, such as radio, television, paging systems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Microwaves&lt;br /&gt;
  cellular phone, satellite, and wireless LAN&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Infrared)&lt;br /&gt;
  short-ange communication such as those between a PC, a peripheral device, indoor LAN, and remote control&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Transmission" /><summary type="html">Transmission media</summary></entry><entry><title type="html">Bandwidth Utilization</title><link href="http://localhost:4000/posts/Bandwidth-Utilization" rel="alternate" type="text/html" title="Bandwidth Utilization" /><published>2018-10-11T00:00:00+09:00</published><updated>2018-10-11T00:00:00+09:00</updated><id>http://localhost:4000/posts/Bandwidth%20Utilization</id><content type="html" xml:base="http://localhost:4000/posts/Bandwidth-Utilization">&lt;h1 id=&quot;multiplexing&quot;&gt;Multiplexing&lt;/h1&gt;

&lt;p&gt;멀티플렉싱은 단일 데이터 링크를 통해 여러 신호를 동시에 전송할 수있는 기술 집합입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;frequency-division ultiplexing (FDM)
여러 주파수 합쳐서(mux) 보낸뒤 filter로 demux한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/FDM_mux.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/FDM_demux.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;예제(No Guard band)&lt;br /&gt;
&lt;img src=&quot;/assets/img/FDM_exp.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;wavelength division multiplexing (WDM)&lt;br /&gt;
광케이블을 프리즘으로 합치고 나눠서 multiplexing 한다. (FDM과 유사)&lt;br /&gt;
&lt;img src=&quot;/assets/img/FDM_exp.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;time-division multiplexing (TDM)&lt;br /&gt;
시간단위로 나눠서 -&amp;gt; 단일코어 멀티프로세싱과 유사&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Synchronous TDM&lt;br /&gt;
한 라인에서 빈공간이 생기면 그만큼 비효율적
One or more synchronization bits are usually added to the beginning of each frame.&lt;br /&gt;
&lt;img src=&quot;/assets/img/Synchronous_TDM.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Statistical TDM&lt;br /&gt;
헤더를 붙여서 보냄&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spectrum-spreadingss&quot;&gt;Spectrum spreading(SS)&lt;/h1&gt;

&lt;p&gt;무선 응용 프로그램(LAN and WANs)에 사용됩니다.&lt;br /&gt;
확장된 스펙트럼을 사용하여 원본을 보다 안전한 전송을 위해 보호 봉투에 보관할 수 있습니다.&lt;/p&gt;

&lt;p&gt;먼저 서로 다른 채널을 결합하기 전에보다 안전한 전송을 위해 신호의 대역폭을 분산시킵니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frequency hopping spread spectrum (FHSS)&lt;br /&gt;
A pseudorandome cod generator를 이용하여 랜덤 패턴을 만드로 Frequency table에 매칭시켜 주파수를 맞춘다.&lt;/li&gt;
  &lt;li&gt;direct sequence spread spectruemm (DSSS)
Original signal의 bit를 Spreading code를 이용해 Spread signal로 만들어 정보를 보호 할 수 있게한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gmimg</name></author><category term="Data_communications" /><category term="Multiplexing" /><category term="Spectrum_spreading" /><summary type="html">Multiplexing</summary></entry><entry><title type="html">데이터베이스 조작</title><link href="http://localhost:4000/posts/control_database" rel="alternate" type="text/html" title="데이터베이스 조작" /><published>2018-10-03T00:00:00+09:00</published><updated>2018-10-03T00:00:00+09:00</updated><id>http://localhost:4000/posts/control_database</id><content type="html" xml:base="http://localhost:4000/posts/control_database">&lt;h1 id=&quot;데이터베이스-조작&quot;&gt;데이터베이스 조작&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;SQL DML&lt;/li&gt;
  &lt;li&gt;SQL 질의어&lt;/li&gt;
  &lt;li&gt;뷰&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dmldata-manipulation-language&quot;&gt;DML(Data Manipulation Language)&lt;/h2&gt;

&lt;p&gt;SQL의 데이터 조작어&lt;/p&gt;

&lt;p&gt;INSERT INTO 테이블 [(column [, column…])] VALUES  (값 [,값]) ;&lt;/p&gt;

&lt;p&gt;NULL값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;[빈칸]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;로&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블명&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;들&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;표현식}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ASC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gmimg</name></author><category term="Database" /><category term="SQL" /><category term="DML" /><category term="뷰" /><summary type="html">데이터베이스 조작</summary></entry></feed>